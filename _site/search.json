[

  
    {
      "title"			: "Dealing with users gone bad…",
      "link"			: "http://localhost:4000/blog/RogueUsers/",
      "excerpt"		: "We have all been there when someone that gets paid more than you do runs in and says “We need to remove User X from the network and lock them out of their PC to preserve evidence!!!”. If not, you will be."
    }
  

  
    ,{
      "title"			: "UnXORing a RAT",
      "link"			: "http://localhost:4000/blog/Unxoring-a-rat/",
      "excerpt"		: "I was looking at a sample of malware and I wanted to highlight a very simple technique I used to remove a layer of encryption without knowing the key. This post is not going to impress the seasoned veterans but since I think it will probably help someone in the community; I will bang out a post on it."
    }
  

  
    ,{
      "title"			: "Review Of Mastering Python Forensics",
      "link"			: "http://localhost:4000/blog/reviews_mastering_python_forensics/",
      "excerpt"		: "On October 30th, Dr. Michael Spreitzenbarth and Dr. Johann Uhrmann released Mastering Python Forensics. Here are a few of my thoughts on it…"
    }
  

  
    ,{
      "title"			: "What happens when Windows Defender Quarantines Stuff...",
      "link"			: "http://localhost:4000/blog/quarantines-junk/",
      "excerpt"		: "Recently a colleague of mine asked me what happens in the file system when a malicious file is &quot;quarantined&quot;."
    }
  

  
    ,{
      "title"			: "Parsing Chrome Artifacts with Python! Part 3",
      "link"			: "http://localhost:4000/blog/parsing-chrome-artifacts-with-python-part-3/",
      "excerpt"		: "Continuing on my mission to bore the crap out of my readers, I took a look at the html local storage databases I discovered in Part One."
    }
  

  
    ,{
      "title"			: "Parsing Chrome Artifacts with Python! Part 2",
      "link"			: "http://localhost:4000/blog/parsing-chrome-artifacts-with-python-part-2/",
      "excerpt"		: "Continuing on with my riveting series on how to parse the Chrome SQLite files with Python, let&#39;s dig a little deeper into SQL portion by taking a look the History database."
    }
  

  
    ,{
      "title"			: "Parsing Chrome Artifacts with Python! Part 1",
      "link"			: "http://localhost:4000/blog/parses-chrome-stuff-with-python/",
      "excerpt"		: "I recently googled myself and saw that I had a blog. After several failed guesses at my e-mail address and password, I was able to stumble back in here. For what it is worth, I have been very busy doing some cool stuff at work. Along those lines, I wanted to highlight some tips on Chrome forensics."
    }
  

  
    ,{
      "title"			: "Adventure in Parsing the WebCacheV01.dat",
      "link"			: "http://localhost:4000/blog/adventure-in-parsing-the-webcachev01-dat/",
      "excerpt"		: "So after taking a closer look at the code behind the libesedb I saw where I was going wrong when looking for those long text values. Here is an updated parser for WebCacheV01.dat."
    }
  

  
    ,{
      "title"			: "Use Python to Encrypt Memory Files",
      "link"			: "http://localhost:4000/blog/uses-python-to-encrypt-huge-files/",
      "excerpt"		: "I was looking for a way to quickly encrypt large files in python."
    }
  

  
    ,{
      "title"			: "My analysis of Dridex malware (Part Two)",
      "link"			: "http://localhost:4000/blog/analyzes-dridex-malware-p2/",
      "excerpt"		: "In the last post, I analyzed a dropper associated with Dridex. This post will focus on analyzing the assa.exe that was dropped."
    }
  

  
    ,{
      "title"			: "My analysis of Dridex malware (Part One)",
      "link"			: "http://localhost:4000/blog/analyzes-dridex-malware-p1/",
      "excerpt"		: "I had a few unscripted hours to kill before bed so I snagged a Dridex sample from Malwr.com to see what all of the fuss was about."
    }
  

  
    ,{
      "title"			: "These Aren't Yo Momma's WMIC Commands",
      "link"			: "http://localhost:4000/blog/lists-some-wmic-commands/",
      "excerpt"		: "I outright stole most of this off of @nbaronian but I plan on updating this post with more as they come to me."
    }
  

  
    ,{
      "title"			: "34 File Entries on a Brand New $MFT",
      "link"			: "http://localhost:4000/blog/34-file-entries-on-a-brand-new-mft/",
      "excerpt"		: "So recently there was a request on a DFIR mailing list about recovering $MFT FILE records.That got me thinking about the creation of the $MFT so I added a new virtual drive to a VM and formatted it."
    }
  

  
    ,{
      "title"			: "Evidence of USB Transfer Cable",
      "link"			: "http://localhost:4000/blog/examines-usb-transfer-cable/",
      "excerpt"		: "Recently my local RadioShack had a huge &quot;Going Out of Business&quot; sale. So I grabbed a few things I that looked interesting. Among those items was a RadioShack USB Transfer Cable for Windows and Mac."
    }
  

  
    ,{
      "title"			: "Useless Trivia about Windows Process IDs",
      "link"			: "http://localhost:4000/blog/notes-about-windows-process-ids/",
      "excerpt"		: "Here are somethings I discovered about Windows Process IDs that I did not previously know..."
    }
  

  
    ,{
      "title"			: "Mass Undelete from the Recycle Bin",
      "link"			: "http://localhost:4000/blog/mass-undelete-from-the-recycle-bin/",
      "excerpt"		: "This is more &quot;e-discovery&quot; than forensics but I recently had a case where I needed to 1,300 files that were in a user&#39;s Recycle Bin.It was not overly important to the user’s management when they were originally created or when it was deleted. They just wanted to review the documents. So I took an hour and hammered out this beast.&lt;/p&gt;"
    }
  

  
    ,{
      "title"			: "A Few SysmonMaps for Referrence",
      "link"			: "http://localhost:4000/blog/posts-a-few-sysmonmaps-for-referrence/",
      "excerpt"		: "This post is mostly for me but you can read it if you want.Here are maps I created with SysInternals Sysmon, Google&#39;s Org Chart API and fistfuls of Javascript and PowerShell.Win7SysmonMapWin8 SysmonMapWin10 TP SysmonMapWin10 TP SysmonMap w/PID collisionWin10x64"
    }
  

  
    ,{
      "title"			: "The magic trick I discovered in the Windows 10 boot process...",
      "link"			: "http://localhost:4000/blog/looks-at-the-win10-boot-process/",
      "excerpt"		: "So there I was, at the tail end of a RaDFIRe presentation that I barely had time to make much less review, trying to demonstrate how similar the Windows 7, 8, and 10 Tech Preview boot operations were when I brought up the SysmonMap for Windows 10. It was different from the rest and it threw me for a loop in front of a crowd. I will explain the difference I noticed.Long before time began, there was Windows 3.1. Windows 3.1 introduced the Session Manager Subsystem (SMSS.EXE). SMSS.EXE is responsible for a few things: creating page files and environment variables, creating DOS device mappings like LPT1, and most importantly it creates the Kernel mode (WIN32K.SYS) and User mode (CSRSS.EXE) of the Win32 subsystem. The important difference between the two is that Kernel mode processes were allowed to talk, through device drivers, directly to hardware devices whereas User mode processes have to use Windows API calls to indirectly talk to hardware. Many of the security problems with early versions of Windows stemmed from allowing services and user applications to run in the same session.To establish a greater rift between user and system mode processes, starting in Windows Vista, SMSS creates two copies of itself on boot. The first instance of SMSS is used to run Session 0 and is reserved exclusively for services and other non-interactive user applications. Session 0 is used to launch operating system and background processes like Local Session Manager Service (LSM), Local Security Authority (LSA), and Services Controller Manager (SCM) to name a few. Most importantly, this is the session that all services are run in. This second screenshot is what a Windows 8 Session 0 SMSS.EXE looks like on a SysmonMap. This is something to look for in &quot;Know normal, Find Evil&quot; category. Like the Highlander, there can (should) be only ONE SMSS.EXE running. For sessions higher than 0, a SMSS.EXE is launched but it terminates once WINLOGON.EXE is running. If you have more than one SMSS.EXE running on your system...you have a problem.Users who are logged on to Windows and their user applications must run in Session 1 or higher. Session 0 no longer support User interfaces. In fact, processes running in Session 0 have no access to the graphics hardware thus user interfaces cannot be directly displayed on the monitor.Don&#39;t believe me? Try this:Download PsExec from Microsoft SysInternals site.Run psexec.exe -s -d calc.exe to run calc.exe in Session 0.You won&#39;t see the calculator window pop up but it is running.You can check with WMIC to see what sessionid it is running under as well.Looks like this:The second instance of SMSS establishes Session 1 and supports interactive User processes. Every additional concurrent user gets their own Session. So if I logon into a server over RDP after someone else is already logged on, my Session ID will be higher than 1. This is an interesting artifact to review when establishing attribution of running processes. While sessions are designed to partition the processes of concurrent users, it is pretty easy to run a process in another session.If I logged in after someone else and wanted an interactive process to appear in their session, all I would need to do is:psexec.exe -i 1 ProcessForLoggedOnUserToSee.exe -i         Run the program so that it interacts with the desktop of the            specified session on the remote system. If no session is            specified the process runs in the console session.Once you stare at enough event logs, behavior like that would stick out if you know what to look for. While this information might seem off topic, I will bring it all full circle.Back to the Windows 10... Here is theWin10 Tech Preview SysmonMap I was displaying to the crowd. It is a bit busy to look at but here is the condensed version. So just as with Vista/7/8, SMSS launched two instances of itself to create Session 0 and Session 1 but, in Windows 10 the client session SMSS.EXE apparently doesn&#39;t directly start any processes. Instead, an Session 0 SVCHOST.EXE is used to launch WINLOGON.EXE? This can&#39;t be right. Let&#39;s dig a little deeper...Here is the XML for the SMSS.EXE process creation as logged by Sysmon:Notice the PID of 660, image of &quot;C:\Windows\System32\smss.exe&quot; and the GUID of 66AE7ABA-04DC-54DD-0000-001055930000Now lets look at the XML for the WINLOGON.EXE process creation:Take a look at the ParentProcess.The PID is the 660The GUID is the 66AE7ABA-04DD-54DD-0000-0010CC300100?!The image is... SVCHOST.EXE?!MIND. BLOWN.That is some David Copperfield shit there.I am not sure what happened here but questions abound:1. Is this magic trick something that is new with Windows 10? I can&#39;t imagine a purpose for a change like this.2. Is this an artifact of the Windows Boot sequence that I don&#39;t fully understand? Maybe.3. Is this a Sysmon logging error? If this is an error on Sysmon&#39;s side, it is the first major SNAFU I have encountered.4. Is this an quirk of a half-baked Tech Preview? Could be.My money is riding on some combination of 3 and 4.I would not have found whatever this is if I had not recently made a change in my SysmonMapper script.I was binding parent processes to child processes using processids BUT that leads to erroneous results across reboots because everything maps back to pid 4 every time. Instead I chose GUIDs because it allows the script to handle start ups and shut downs throughout the time frame of the query. Once I get the new code presentable I will put it up here. Currently it is functional but looks like a toddler wrote it.Since I have run out of things to say about this subject, this is where I leave you. If an answer comes forth to explain this prestidigitation, I will put all of your minds at ease and post it as an update here. If you can shed some light on this, hit me up in the comments section or on Twitter.*******UPDATE***********Reading further into the logs I found the event for SVCHOST.EXE launching:Things are starting to become a bit clearer. So far I can tell thatAt 19:54:14.351173000Z, SMSS.EXE starts with PID 660.At 19:54:14.366799500Z, WINLOGON.EXE starts.At 19:54:14.569924800Z, SVCHOST.EXE starts with 660 starts.At 19:54:15.335550000Z, SYSMON.EXE starts up.The Sysmon logs show that SVCHOST.EXE as the parent process for WINLOGON.EXE but since SVCHOST.EXE hadn&#39;t started yet this is clearly an error.What happened was a PID collision. Here is how it actually went down:1. SMSS.EXE starts up with PID 6602. SMSS.EXE launches WINLOGON.EXE just like Windows Vista/7/83. Once WINLOGON.EXE is running, the Session 1 SMSS.EXE terminates and releases PID 660 back into the pool of available pid numbers.4. SVCHOST.EXE starts up and grabs PID 660.5. Sysmon starts up and sees the Parent PID for WINLOGON.EXE is 660 and the current PID for SVCHOST is 660 and makes a reasonable guess.This is explains EVERYTHING. It also highlights how Sysmon documents things that occur before it is running to see them. Good stuff. So no magic here, just Sysmon erroneously logging based off of a PID collision. "
    }
  

  
    ,{
      "title"			: "How to Use Sysmon 2.0 (Part 2)",
      "link"			: "http://localhost:4000/blog/discusses-sysmon-v2-filtering-rules/",
      "excerpt"		: "Sysmon 2.0 Rule filteringIf you have used Sysmon for any extended length of time, you already know that the logs fill up quick. This is the nature of Windows. There is a lot going on under the hood. If you configure Sysmon to log when processes create network connections (Event ID 3) and load modules (Event ID 7), you are going to record more logs than you want to read.To help add granularity, 2.0 comes with the ability to filter events based off a flexible ruleset. This is implemented through an XML configuration file that can be applied during installation and changed any time. The configuration commands can be found on the SysInternals&#39; Sysmon page. Here is an example of a basic configuration file w/some notes:The XML file is broken into to two sections Configuration and Rules.The Configuration section provides for the same options config options from the command line.-h Configuration entry: Hashing-l Configuration entry: ImageLoading-n Configuration entry: NetworkThe Rules section allows you to configure which events you want to include/exclude.Making rules are pretty easy:Pick a Sysmon Event you want to include/exclude in the logs.ID	Tag	           Event1	ProcessCreate	   Process Create2	FileCreateTime	   File creation time3	NetworkConnect	   Network connection detected5	ProcessTerminate   Process terminated6	DriverLoad	   Driver Loaded7	ImageLoad	   Image loadedLets say I want to focus on Event ID 2 events so I will use the &quot;NetworkConnect&quot; tag.Determine if you are want to use this rule to include or exclude something.This might be the most confusing part but fear not, I will lead you through.A Sysmon rule asks for a default action to apply to all events of that type. To Log (include) or not to Log (exclude), that is the question. Once you have established the default action, you include conditional statements that act as exceptions to the default action. So if the default action is to INCLUDE, all of the conditions in the rule will be used to EXCLUDE events from the log. The opposite is also true, if the default action is to EXCLUDE, all of the conditions in the rule will be used to INCLUDE events in the log.Cast an appropriate net.This is where Sysmon shines. If you are configuring Sysmon monitor something specific, these new rules afford that level of granularity. Inversely, you can increase the Signal-to-Noise ratio and not log noisy known good processes (antivirus, binaries with specific hashes, etc).This is an example of a configuration file to observe the specific actions of a particular malware:Here is a random example I pulled from the good people at malwr.com.Here is a Sysmon configuration file that could be used to monitor most of the behavior. (This is not exhaustive, just an example of potential use.)Using Sysmon for something this specific is great but when you are staring at trees, you are going to miss the forest. Here is an example of how to use Sysmon as an everyday background service that monitors everything EXCEPT for processes that you would rather not see cluttering up your logs.&lt;/ol&gt;The seriously useful part about the configuration file is that you can load a new one at anytime.C:\Windows\System32&gt;sysmon.exe -c OnlyLookAtOneThing.xmlC:\Windows\System32&gt;sysmon.exe -c DontLogPornHubTraffic.xmlThis makes Sysmon very deployable and scalable. Personally, on most of my machines, I typically run Sysmon wide open, without any restriction on what to log unless I want to document something specific. I also increase the log size to something ridiculous like 200 MB.wevtutil sl Microsoft-Windows-Sysmon/Operational /ms:209715200"
    }
  

  
    ,{
      "title"			: "How to Use Sysmon 2.0 (Part 1)",
      "link"			: "http://localhost:4000/blog/discusses-sysmon-v2/",
      "excerpt"		: "On January 19, 2015, the SysInternals team released Sysmon 2.0. &quot;This major update to Sysmon, a service that records process activity to the Windows event log for use by incident detection and forensic analysis, includes driver load and image load events with signature information, configurable hashing algorithm reporting, flexible filters for including and excluding events, and support for supplying configuration via a configuration file instead of the command line.&quot;One interesting update in 2.0 is the addition of Import Hashes (imphash).If you are not familiar, imports are the functions that a piece of software calls from other files. Most of the time, imports are used to augment a program with a function from a Windows DLL. Imphashes are calculated by based on library/API names and their specific order within the executable. Imphashes are useful for tracking flavors of malware that use the same functionality but have different binaries. This addition separates Sysmon from being an augmentation of Windows event logging to a utility that is designed to analyze malware. Awesome.2.0 also comes with 5 new events:Event ID 4: Sysmon service state changedThe service state change event reports the state of the Sysmon service (started or stopped).&lt;Event xmlns=&quot;http://schemas.microsoft.com/win/2004/08/events/event&quot;&gt;  &lt;System&gt;    &lt;Provider Name=&quot;Microsoft-Windows-Sysmon&quot; Guid=&quot;{5770385F-C22A-43E0-BF4C-06F5698FFBD9}&quot; /&gt;    &lt;EventID&gt;4&lt;/EventID&gt;    &lt;Version&gt;1&lt;/Version&gt;    &lt;Level&gt;4&lt;/Level&gt;    &lt;Task&gt;4&lt;/Task&gt;    &lt;Opcode&gt;0&lt;/Opcode&gt;    &lt;Keywords&gt;0x8000000000000000&lt;/Keywords&gt;    &lt;TimeCreated SystemTime=&quot;2015-01-21T16:54:43.336928400Z&quot; /&gt;    &lt;EventRecordID&gt;216242&lt;/EventRecordID&gt;    &lt;Correlation /&gt;    &lt;Execution ProcessID=&quot;1112&quot; ThreadID=&quot;1168&quot; /&gt;    &lt;Channel&gt;Microsoft-Windows-Sysmon/Operational&lt;/Channel&gt;    &lt;Computer&gt;WIN-RKSC06DQ86F&lt;/Computer&gt;    &lt;Security UserID=&quot;S-1-5-18&quot; /&gt;  &lt;/System&gt;  &lt;EventData&gt;    &lt;Data Name=&quot;State&quot;&gt;Started&lt;/Data&gt;  &lt;/EventData&gt;&lt;/Event&gt;Event ID 5: Process terminatedThe process terminate event reports when a process terminates. It provides the UtcTime, ProcessGuid and ProcessId of the process.&lt;Event xmlns=&quot;http://schemas.microsoft.com/win/2004/08/events/event&quot;&gt;  &lt;System&gt;    &lt;Provider Name=&quot;Microsoft-Windows-Sysmon&quot; Guid=&quot;{5770385F-C22A-43E0-BF4C-06F5698FFBD9}&quot; /&gt;    &lt;EventID&gt;5&lt;/EventID&gt;    &lt;Version&gt;1&lt;/Version&gt;    &lt;Level&gt;4&lt;/Level&gt;    &lt;Task&gt;5&lt;/Task&gt;    &lt;Opcode&gt;0&lt;/Opcode&gt;    &lt;Keywords&gt;0x8000000000000000&lt;/Keywords&gt;    &lt;TimeCreated SystemTime=&quot;2015-01-21T17:00:43.600396700Z&quot; /&gt;    &lt;EventRecordID&gt;277158&lt;/EventRecordID&gt;    &lt;Correlation /&gt;    &lt;Execution ProcessID=&quot;1112&quot; ThreadID=&quot;1332&quot; /&gt;    &lt;Channel&gt;Microsoft-Windows-Sysmon/Operational&lt;/Channel&gt;    &lt;Computer&gt;WIN-RKSC06DQ86F&lt;/Computer&gt;    &lt;Security UserID=&quot;S-1-5-18&quot; /&gt;  &lt;/System&gt;  &lt;EventData&gt;    &lt;Data Name=&quot;UtcTime&quot;&gt;1/21/2015 05:00:43.481 PM&lt;/Data&gt;    &lt;Data Name=&quot;ProcessGuid&quot;&gt;{FF1717CF-DB0B-54BF-0000-001015761600}&lt;/Data&gt;    &lt;Data Name=&quot;ProcessId&quot;&gt;10096&lt;/Data&gt;  &lt;/EventData&gt;&lt;/Event&gt;Event ID 6: Driver loadedThe driver loaded events provides information about a driver being loaded on the system. The configured hashes are provided as well as signature information. The signature is done asynchronously for performance reasons and indicates if the file was removed after loading.&lt;Event xmlns=&quot;http://schemas.microsoft.com/win/2004/08/events/event&quot;&gt;  &lt;System&gt;    &lt;Provider Name=&quot;Microsoft-Windows-Sysmon&quot; Guid=&quot;{5770385F-C22A-43E0-BF4C-06F5698FFBD9}&quot; /&gt;    &lt;EventID&gt;6&lt;/EventID&gt;    &lt;Version&gt;1&lt;/Version&gt;    &lt;Level&gt;4&lt;/Level&gt;    &lt;Task&gt;6&lt;/Task&gt;    &lt;Opcode&gt;0&lt;/Opcode&gt;    &lt;Keywords&gt;0x8000000000000000&lt;/Keywords&gt;    &lt;TimeCreated SystemTime=&quot;2015-01-21T16:54:54.924095100Z&quot; /&gt;    &lt;EventRecordID&gt;218132&lt;/EventRecordID&gt;    &lt;Correlation /&gt;    &lt;Execution ProcessID=&quot;1112&quot; ThreadID=&quot;1336&quot; /&gt;    &lt;Channel&gt;Microsoft-Windows-Sysmon/Operational&lt;/Channel&gt;    &lt;Computer&gt;WIN-RKSC06DQ86F&lt;/Computer&gt;    &lt;Security UserID=&quot;S-1-5-18&quot; /&gt;  &lt;/System&gt;  &lt;EventData&gt;    &lt;Data Name=&quot;UtcTime&quot;&gt;1/21/2015 04:54:47.299 PM&lt;/Data&gt;    &lt;Data Name=&quot;ImageLoaded&quot;&gt;C:\Windows\System32\drivers\WdNisDrv.sys&lt;/Data&gt;    &lt;Data Name=&quot;HashType&quot;&gt;SHA1,MD5,SHA256,IMPHASH&lt;/Data&gt;    &lt;Data Name=&quot;Hash&quot;&gt;9F469B3BA78F83D1F8B73B4F6EFD365F92A89786,282E7D46310338FF4A6B7680440EB0DA,04242798DD82F583154AEA3D775C9BFD574FC471D01CDEB9D070872425094D82,FEC15D772A16260D523B3D2E2797F735&lt;/Data&gt;    &lt;Data Name=&quot;Signed&quot;&gt;true&lt;/Data&gt;    &lt;Data Name=&quot;Signature&quot;&gt;Microsoft Windows&lt;/Data&gt;  &lt;/EventData&gt;&lt;/Event&gt;Event ID 7: Image loadedThe image loaded event logs when a module is loaded in a specific process. This event is disabled by default and needs to be configured with the –l option. It indicates the process in which the module is loaded, hashes and signature information.  The signature is done asynchronously for performance reasons and indicates if the file was removed after loading. This event should be configured carefully, as monitoring all image load events will generate a large number of events.&lt;Event xmlns=&quot;http://schemas.microsoft.com/win/2004/08/events/event&quot;&gt;  &lt;System&gt;    &lt;Provider Name=&quot;Microsoft-Windows-Sysmon&quot; Guid=&quot;{5770385F-C22A-43E0-BF4C-06F5698FFBD9}&quot; /&gt;    &lt;EventID&gt;7&lt;/EventID&gt;    &lt;Version&gt;1&lt;/Version&gt;    &lt;Level&gt;4&lt;/Level&gt;    &lt;Task&gt;7&lt;/Task&gt;    &lt;Opcode&gt;0&lt;/Opcode&gt;    &lt;Keywords&gt;0x8000000000000000&lt;/Keywords&gt;    &lt;TimeCreated SystemTime=&quot;2015-01-21T17:00:43.977452900Z&quot; /&gt;    &lt;EventRecordID&gt;277336&lt;/EventRecordID&gt;    &lt;Correlation /&gt;    &lt;Execution ProcessID=&quot;1112&quot; ThreadID=&quot;1332&quot; /&gt;    &lt;Channel&gt;Microsoft-Windows-Sysmon/Operational&lt;/Channel&gt;    &lt;Computer&gt;WIN-RKSC06DQ86F&lt;/Computer&gt;    &lt;Security UserID=&quot;S-1-5-18&quot; /&gt;  &lt;/System&gt;  &lt;EventData&gt;    &lt;Data Name=&quot;UtcTime&quot;&gt;1/21/2015 05:00:43.789 PM&lt;/Data&gt;    &lt;Data Name=&quot;ProcessGuid&quot;&gt;{FF1717CF-DB37-54BF-0000-001008982000}&lt;/Data&gt;    &lt;Data Name=&quot;ProcessId&quot;&gt;41744&lt;/Data&gt;    &lt;Data Name=&quot;Image&quot;&gt;C:\Windows\System32\cmd.exe&lt;/Data&gt;    &lt;Data Name=&quot;ImageLoaded&quot;&gt;C:\Windows\System32\advapi32.dll&lt;/Data&gt;    &lt;Data Name=&quot;HashType&quot;&gt;SHA1,MD5,SHA256,IMPHASH&lt;/Data&gt;    &lt;Data Name=&quot;Hash&quot;&gt;C446DE5692D5CA9B7DAEE0F0A48FC6A575F8FE3A,561F1AB95F4F01C691BDABA5FD5C67FC,4C6184C1A72B2F84BB1CA5A72F89CC44F9F37FF225D834EBCEFF26F820635BED,973A8CDB39A3DB10C284AFB640B793B3&lt;/Data&gt;    &lt;Data Name=&quot;Signed&quot;&gt;true&lt;/Data&gt;    &lt;Data Name=&quot;Signature&quot;&gt;Microsoft Windows&lt;/Data&gt;  &lt;/EventData&gt;&lt;/Event&gt;Event ID 255: ErrorThis event is generated when an error occurred within Sysmon. They can happen if the system is under heavy load and certain tasked could not be performed or a bug exists in the Sysmon service.&lt;Event xmlns=&quot;http://schemas.microsoft.com/win/2004/08/events/event&quot;&gt;  &lt;System&gt;    &lt;Provider Name=&quot;Microsoft-Windows-Sysmon&quot; Guid=&quot;{5770385F-C22A-43E0-BF4C-06F5698FFBD9}&quot; /&gt;    &lt;EventID&gt;255&lt;/EventID&gt;    &lt;Version&gt;1&lt;/Version&gt;    &lt;Level&gt;2&lt;/Level&gt;    &lt;Task&gt;255&lt;/Task&gt;    &lt;Opcode&gt;0&lt;/Opcode&gt;    &lt;Keywords&gt;0x8000000000000000&lt;/Keywords&gt;    &lt;TimeCreated SystemTime=&quot;2015-01-21T17:00:44.001453300Z&quot; /&gt;    &lt;EventRecordID&gt;278772&lt;/EventRecordID&gt;    &lt;Correlation /&gt;    &lt;Execution ProcessID=&quot;1112&quot; ThreadID=&quot;1332&quot; /&gt;    &lt;Channel&gt;Microsoft-Windows-Sysmon/Operational&lt;/Channel&gt;    &lt;Computer&gt;WIN-RKSC06DQ86F&lt;/Computer&gt;    &lt;Security UserID=&quot;S-1-5-18&quot; /&gt;  &lt;/System&gt;  &lt;EventData&gt;    &lt;Data Name=&quot;ID&quot;&gt;DriverCommunication&lt;/Data&gt;    &lt;Data Name=&quot;Description&quot;&gt;Failed to retrieve events (Last error: Insufficient system resources exist to complete the requested service.).&lt;/Data&gt;  &lt;/EventData&gt;&lt;/Event&gt;Took me a second to get Sysmon to throw an error like this. It is worthy to note that, from my observations, Sysmon is not prone to error under normal use. In case anyone is wondering how to make Sysmon barf (along with the rest of the computer) I used an old school fork logic bomb batch script as a means to an end. Drop this into a batch file and run it. THIS WILL LOCK UP YOUR ENTIRE SYSTEM QUICK. You have been told.:STARTstart %~dp0%~n0%~x0%~dp0%~n0%~x0|%~dp0%~n0%~x0GOTO STARTI am sure there are more elegant ways but this was the first idea that came to mind that worked.Sysmon 2.0 also has a filtering feature that I will cover in the next post."
    }
  

  
    ,{
      "title"			: "Stupid VBS tricks I discovered...",
      "link"			: "http://localhost:4000/discovers-stupid-vbs-tricks/",
      "excerpt"		: "This is dumb but I was trolling malwr.com and noticed there was a keyword for &quot;VBS&quot;.Uncompiled malware in a text file? Sign me up. Here are a few of the tidbits I picked up:Here is an example of how to retrieve files from the interwebs with VBScript:Dim oFSO: Set oFSO = CreateObject(&quot;Scripting.FileSystemObject&quot;)a = GetRequest(&quot;https://jon.glass&quot;)With oFSO.createTextFile(&quot;index.htm&quot;)    .Write(a)    .CloseEnd WithFunction GetRequest(URL)    GetRequest=&quot;&quot;    Dim o    Set o = CreateObject(&quot;MSXML2.XMLHTTP&quot;)    o.open &quot;GET&quot;,URL, false    o.send    GetRequest=o.responseTextEnd FunctionHere is an example of how to use VBScript to make a post :post &quot;jon.glass&quot;,&quot;test&quot;function post(cmd ,da)    post=&quot;&quot;    UAString = &quot;whatever the hell you want&quot;    Dim o    Set o = CreateObject(&quot;MSXML2.XMLHTTP&quot;)    o.open &quot;POST&quot;,&quot;http://&quot; &amp; cmd, false    o.setRequestHeader &quot;User-Agent:&quot;, UAString    o.send da    post=o.responseTextend functionThis is probably something well documented but since I was unfamiliar with it and it looks vaguely useful...I posted it here for future reference. "
    }
  

  
    ,{
      "title"			: "Misadventures in Parsing the WebCacheV01.dat (Part 3)",
      "link"			: "http://localhost:4000/dfir/misadventures-in-parsing-the-webcachev01-dat-part-3/",
      "excerpt"		: "I have always found the best way to understand something is to try to build it. With that in mind I discovered an IronPython library for working with ESENT Databases.Turns out it&#39;s fairly simply to use. In this example I create an ESE database and add two Test values, one LargeText Value, and another text value.Which looks like this in EseDatabaseView:And here is what the esedb_data table looks like in a Hex Editor:I have highlighted the section of the table associated with the LongText value. Just like in the last post, we don&#39;t see that LongText value but we do see a pointer to it. This can be a little hard to see in this format so if we display the hex of each record as a line in a text file it becomes more noticeable.The 05 type code for LongValues is the same as the WebCacheV01.dat. The next four bytes are the LID.Let&#39;s take a look at what the LongText value looks like in a Hex Editor:Header:Footer:The 4 bytes after the LID, as shown in purple, appear to involve sequencing. The header has 00 00 00 00 and the footer has 01 00 00 00.I am not sure I am any closer to finding and parsing this value from a python script but this is interesting to look at if nothing else. I think the real nail in this project&#39;s coffin is that I discovered a tool that does this already. :( I don&#39;t know why I didn&#39;t see it earlier but, BrowsingHistoryView works like a champ from the command line. I will put it through some paces and put up a review.I am still going to keep an eye on the python libraries longvalue support because I want a open-source tool that I can tweak if I need to."
    }
  

  
    ,{
      "title"			: "Misadventures in Parsing the WebCacheV01.dat (Part 2)",
      "link"			: "http://localhost:4000/misadventures-in-parsing-the-webcachev01-dat-part-2/",
      "excerpt"		: "This post is meant as an exploration of things you can do when you have no clue what you&#39;re doing. :)I am not saying these steps are correct. I am just documenting this work in progress. Currently, this story does not have a happy ending.So in my previous post, I mentioned that I was getting weird output when parsing the URLs from WebCacheV01.dat.My first step in isolating the problem was to figure out which records were affected and which were not.So I altered the code of the Python scripts to print the EntryID field in addition to the Url Field.This gives me an output that looks like this:The first thing that jumped out at me was the unicode characters that were displayed instead of URLs. 0018, 0019, 001A, 001B...some kind of... pattern...forming. To highlight the missing values, I simply grepped out the all of URLS and added a dash of command-line kungfu...and voilÃ !So instead of a URL, these records have a value that is iterating. Neat. So I am assuming that this is the long value record number but if the URL isn&#39;t here, where is it? This is where ESEDatabaseView comes in handy. To find where the URLs are in the WebCacheV01.dat, I picked the record that didn&#39;t parse, opened it up in ESEDatabaseView and took a look at the URL.The URL for this record was: Visited: jon@http://ads-cast.com/rlast?dt=1bd723dc&amp;uri=recipehangouts.com%2frc%3fdt%3d2cf909a8%7curi%3dservedbyads.net%253ftt%253dsb%2526query%253dnFub3jwxWFDQAkHii1IcyjylSlTz3.eULDVRy2DUvcRI1aFXhHquAODUNsn8DnzelULy2xk9Q0WMDEqxRrUUMVRhR*yKrAJLUqt.E7wVmAkOOKyXWBJLelRNBlDYRLeAqoVPx4YoJRkTP.usCKwnrs3qp4YikjZn.NCHt.x3tlTifLODFVH*j9MkXIAikwXVO6Lr0RMbdnqNluEgvMD5tT*SjGTLqQ5EO8nlP*.3UDnOBm2i2vwLOdU8VxFkgSFP%7cunq%3dtrue%7ctd%3dFpWk.DD16pc73UdTJiml.6I97dIkGVvGjK4beBwj8EiJNMFEr3Xzvn7HkVbwd9nV2T3Y4tif4lIq7GcE9A5FYLlQy.Qx4SuirFbyhYJDH3YzHXLYsqofJSW.rBj2qtXbfaX1FTmbA77Dckr90mDMYgkoDgJyl6YEoZyNccn23Xj1CN2Uiw*CwhAc1EKGseHbdkC0K*jewTzXcNUFh*M0rMYrbpx9Pou8rjoz17aNKcvNk0tn16gwjImOL4omR1ecwYThp2KhLQiz*m4F9RObSLD97kG1Sg05dRzGeLRqP*GbL0Sq0sHJG.1En6aL6zuu7tXrdkL0GIr8LE5wfafmYnhTAoatCrSybnG7.B73OSziL0kydVwg3ETljyHYCzWL.78GVyR6M4Lw55i2l0F9OzlVVYxdYd3mxs9rEibH*eZZW0eAa7Z5Wiy0m2Pzp45.kB6sAH5bSdLpXJTxt0BQxIaHGkqB4h9EOW*bRJ*ABLA-%7cfss%3dec54b83b-306a-40a6-8120-ef664583323f. Cracking open a hex editor and searching for that unicode string shows it is located from 1869838 to 1871761. Here are some of my notes on the Long Text value header and footer (rough guesses):Offset: 1869828-1869837: 08 20 00 00 00 19 00 00 00 00 - Start Record Header	08 20 Header sig?	00 00 00 19 Long Value Identifier	00 00 00 00 Array address within LongValue? Start marker?Offset: 1869838-1871761:	Unicode URL ****same as above****Offset: 1871762-1871775: 04 20 00 00 00 19 01 00 00 00 84 07 00 00 End of Record Footer	04 20  Footer Sig?	00 00 00 19 Long Value Identifier	01 00 00 00 End Marker???	84 07 00 00 LENGTH  of the Long Value 784h &gt; 1924d (1871761 - 1869838 = 1924)Here is what I found on the Microsoft Exchange website:Long-ValuesA column or a record in ESE cannot span pages in the data B-tree. There are values (such as PR_BODY, which is the message body of a message) that break the 4KB boundary of a page. These are referred to as long-values (LV). A table&#39;s long-value B-tree is used to store these large values. If a piece of data is entered in an ESE table, and it is too large to go into the data B-tree, it is divided into four KB sized pages and stored in the table&#39;s separate long-value B-tree. The record in the data B-tree contains a pointer to the long-value. This pointer is called the long-value ID (LID) and means that the record has a pointer to LID 256.I also found this nugget in Tony Redmond&#39;s Microsoft Exchange Server 2003: with SP1:Each table can have a long value tree, which is created on an as-needed basis. If a piece of data is too big to fit into a data tree, it is broken up into a series of 4KB chunks stored in the long value tree. Each chunk is assigned a table wide identifier within the long value tree. When required, data can be located very efficiently in the long value tree through a combination of the identifier and the offset within the tree.This is consistent with what I am seeing. So the question is how do I reference the table&#39;s separate long-value B-tree? The saga continues..."
    }
  

  
    ,{
      "title"			: "Misadventures in Parsing the WebCacheV01.dat (Part 1)",
      "link"			: "http://localhost:4000/attempts-to-parse-webcachev01-dat/",
      "excerpt"		: "Recently, I found myself with a bit of free time so I decided to attempt to create a python CLI tool for live parsing the WebCache from my Windows 8.1 machine. My goal is to make something that I can include in a live response script.For those who may not be aware, since the introduction of Windows 8 and Internet Explorer 10, IE no longer logs internet history to the traditional index.dat file. Microsoft decided to store IE cache information in an Extensible Storage Engine (ESE) database (also known as Jet Blue). This makes sense to me. ESE is used in Microsoft Exchange Server&#39;s Mailbox Database.edb and Public Folder Database.edb to store mail data. ESE is used in the Active Directory database NTDS.DIT file for storing objects. ESE is also used in Windows Search Service cache, which can be found %Profiles%/All Users/Application Data/Microsoft/Search/Data/Applications/Windows/Windows.edb. (Oddly enough I appear to a have another copy located C:ProgramDataMicrosoftSearchDataApplicationsWindows. I will figure that out later.) For now, let&#39;s get back to the topic at hand: WebCacheV01.dat.If you are completely unfamiliar with forensics on ESE databases, I recommend reading this, this, and this. When I started researching how to parse ESE databases, I found that Nirsoft&#39;s ESEDatabaseView mentioned more than any other tool. This utility is wonderful for displaying the contents of an ESE DB in a GUI but it does not have a CLI. Unfortunately, this doesn&#39;t work well for my scripting needs. Nevertheless, I highly recommend this tool for the forensic analysis of WebCacheV01.dat. I relied heavily upon this tool to help me understand the structure of the web cache and troubleshoot my scripts when they failed.Continuing on my journey, I discovered two python libraries dedicated to parsing ESE databases:libesedb by Joachim Metz at Google and Impacket&#39;s ese.py by Alberto Solino at CoreLabs. I was able to use both of these with equivalent success to parse the IE 11 Web Cache. I have included some examples of sophomoric but functional code below.Since WebcacheV01.dat contains a lot of information (Cookies, pointers to the location of cache files, etc...), I needed to narrow my focus to only the Web History. My methodology was to parse the Containers container looking for containers named &quot;History&quot; that have &quot;History.IE5&quot; in the Directory field and grab the ContainerId value.In my analysis of WebCacheV01.dat, this appears to be the shortest distance to finding which tables contain IE web history logs. If there is a better way, I would love to hear it. This feels clunky.Once I knew which container contains the web history, it was a simple matter of opening the table and looping through the records. As a proof of concept, I decided to grab just the URLs from the history containers.Here is how I parsed the WebCache using libesedb:Here is how I parsed the WebCache using Impacket:Both of these libraries worked great and returned most of the URLs from the two tables but there were a few records whose URLs did not parse.This took me a minute to figure out but ESE databases have a built-in functionality for handling Long Values. Basically, values that will make the record exceed it&#39;s allotted size will be stored in a separate table. As far as I can tell, neither of the two libraries that I used supports recognizing Long Values and looking them up in their separate table. If they do, I don&#39;t know how to do it. The comments in the Impacket library indicate that Long Values are on the ToDo list. I will be keeping an eye on that.If you guys know of a better way to accomplish this goal, please let me know.I will explain how I defined the problem and the steps I took to reverse-engineer the WebcacheV01.dat in my next post."
    }
  

  
    ,{
      "title"			: "Use Python zlib to recover Zip Files",
      "link"			: "http://localhost:4000/has-fun-with-zlib/",
      "excerpt"		: "So continuing on with my series of borderline obsessive blog posts about zip files, I would like to highlight another technique that can be used to recover compressed data. Python comes with library called zlib that is designed to handle the compression and decompression of data.Lets just jump into the code:Here I am creating two simple functions, deflate and inflate. Deflate is passing data to the zlib.compress function and then it removes the first two bytes(the zlib compression header (0x78 0x9C)) and the last four bytes which contain the checksum. After removing that metadata we are left raw deflated data, exactly like you would find inside of a zip file. The inflate function is fairly simple as well. It passes compressed data to the zlib decompress function with a windowbits size of -15. From the zlib manual &quot;windowBits can also be –8..–15 for raw deflate. In this case, -windowBits determines the window size. deflate() will then generate raw deflate data with no zlib header or trailer, and will not compute an adler32 check value&quot; This is great for our purposes.Now that we have our functions, let&#39;s try them out.To verify that zlib created the same deflated content as the Windows standard compression, I zipped the uncompressed.txt through the Explorer.Then I compared the compressed.bin file with the uncompressed.zip in a hex editor.The File Data in the zip is the same as the data created by zlib. Now that we have raw deflated data that is exactly like what we would find in a broken zip file, lets inflate the it and recover the contents.Here is the entire script:And Voila!You can see the inflated file is the same as the original file. What does this mean? This means we can still recover Zip file contents even if the headers and footers are corrupt or missing."
    }
  

  
    ,{
      "title"			: "Zip Seeking Missile",
      "link"			: "http://localhost:4000/makes-zip-seeking-missile/",
      "excerpt"		: "In the spirit of &quot;don&#39;t give a presentation without offering a script/tool&quot;, here is something I am currently dubbing the &quot;Zip Seeking Missile€ (not married to that name, suggestions are welcome). This script reads in a file and looks for the Local File Headers, Central Directory File Headers, and Central Directory End Records. If found it will attempt to parse the various fields. It is still pretty rough but it is good enough now that someone might find it useful. I intend on adding analysis of the compressed file data and automating the carving process as well. I realize there are probably dozens of software that already do this but I enjoy the insight that comes with building tools from the ground up.https://github.com/glassdfir/ZipFileJunk/blob/master/zsm.pyHere is the usage information:Zip Seeking Missile==========================================Purpose: Reads binary file for zip file headers and parses the metadata.Usage: python zsm.py -f memdump.dmpThis tool can be used on memory dumps, pcaps, disk images, zip files, MS-Office 2007+ files (docx,xlsx...)Usage: zsm.py [options]Options: -h, --help show this help message and exit -f FILE, --file=FILE File to carve Zips from -v, --verbose Show more than file names -c, --count Display only the counts of meta typesC:DEMO&gt;python zsm.py -f &quot;This is a test.docx&quot;Possible 11 Local File Headers at offsets: [0, 915, 1715, 2281, 2884, 4506, 5491, 5991, 6306, 6984, 7661]Offset 0 - LH INFO - File name: [Content_Types].xmlOffset 915 - LH INFO - File name: _rels/.relsOffset 1715 - LH INFO - File name: word/_rels/document.xml.relsOffset 2281 - LH INFO - File name: word/document.xmlOffset 2884 - LH INFO - File name: word/theme/theme1.xmlOffset 4506 - LH INFO - File name: word/settings.xmlOffset 5491 - LH INFO - File name: word/fontTable.xmlOffset 5991 - LH INFO - File name: word/webSettings.xmlOffset 6306 - LH INFO - File name: docProps/app.xmlOffset 6984 - LH INFO - File name: docProps/core.xmlOffset 7661 - LH INFO - File name: word/styles.xmlPossible 11 Central Directory File Headers at offsets: [10549, 10614, 10671, 10745, 10808, 10875, 10938, 11002, 11068, 11130, 11193]Offset 10549 - CD INFO - File name: [Content_Types].xmlOffset 10614 - CD INFO - File name: _rels/.relsOffset 10671 - CD INFO - File name: word/_rels/document.xml.relsOffset 10745 - CD INFO - File name: word/document.xmlOffset 10808 - CD INFO - File name: word/theme/theme1.xmlOffset 10875 - CD INFO - File name: word/settings.xmlOffset 10938 - CD INFO - File name: word/fontTable.xmlOffset 11002 - CD INFO - File name: word/webSettings.xmlOffset 11068 - CD INFO - File name: docProps/app.xmlOffset 11130 - CD INFO - File name: docProps/core.xmlOffset 11193 - CD INFO - File name: word/styles.xmlFound 1 hits for Central Dir. End Record at byte offsets [11254] .C:UsersjonDocumentsGitHubZipFileJunk&gt;python zsm.py -f &quot;c:demozipFile1.zip&quot; -vPossible 3 Local File Headers at offsets: [0, 64, 128]Offset 0 - LH INFO - File name: File1.txt        Version: 2.00        Compression: 08: Deflated        Last Modified Date 2014-11-13 22:31:28        CRC-32 Checksum: 751451497        Compressed size: 25        Uncompressed size: 40        File Name Length: 0        Extra Field Length: 0Offset 64 - LH INFO - File name: File2.txt        Version: 2.00        Compression: 08: Deflated        Last Modified Date 2014-11-13 22:31:16        CRC-32 Checksum: 2035682662        Compressed size: 25        Uncompressed size: 40        File Name Length: 0        Extra Field Length: 0Offset 128 - LH INFO - File name: File3.txt        Version: 2.00        Compression: 08: Deflated        Last Modified Date 2014-11-02 23:47:04        CRC-32 Checksum: 1924788770        Compressed size: 22        Uncompressed size: 23        File Name Length: 0        Extra Field Length: 0Possible 3 Central Directory File Headers at offsets: [189, 244, 299]Offset 189 - CD INFO - File name: File1.txt        Version: 2.00        Version Needed To Extract: 2.00        Compression: 08: Deflated        Last Modified Date 2014-11-13 22:31:28        CRC-32 Checksum: 751451497        Compressed size: 25        Uncompressed size: 40        File Name Length: 9        Extra Field Length: 0        File Comment Length: 0        Disk # Start: 0Offset 244 - CD INFO - File name: File2.txt        Version: 2.00        Version Needed To Extract: 2.00        Compression: 08: Deflated        Last Modified Date 2014-11-13 22:31:16        CRC-32 Checksum: 2035682662        Compressed size: 25        Uncompressed size: 40        File Name Length: 9        Extra Field Length: 0        File Comment Length: 0        Disk # Start: 0Offset 299 - CD INFO - File name: File3.txt        Version: 2.00        Version Needed To Extract: 2.00        Compression: 08: Deflated        Last Modified Date 2014-11-02 23:47:04        CRC-32 Checksum: 1924788770        Compressed size: 22        Uncompressed size: 23        File Name Length: 9        Extra Field Length: 0        File Comment Length: 0        Disk # Start: 0Found 1 hits for Central Dir. End Record at byte offsets [354] .Taking this experiment to a logical extreme, I threw a 12GB memory dump into the script and here are the results. I was amazed by all of the Java that was floating around in memory. I also noticed the tool can generate some false positives on the file name. Occasionally those magic numbers just occur in memory and this script will attempt to parse whatever it sees. I did put a limit of 260 on the file name in an effort to knock down some of the false positives. Windows Shell API limits a single path to around 260 characters depending upon your flavor of Windows. Seems like as good of a number as any."
    }
  

  
    ,{
      "title"			: "Zip File Presentation from RaDFIRe",
      "link"			: "http://localhost:4000/talks-about-zip-files/",
      "excerpt"		: "Recently, I had the opportunity to create a forensic challenge at work that focused on data loss. The scenario included a several instances of data exfiltration but one specifically seemed more forensically challenging than the rest. A portion of the challenge included a zip file that was uploaded directly from a mapped network drive to Google Docs. The file was never logically written directly to the C: drive.Participants were given only the memory dump and a dd of the workstation hard drive to work with.No other information was provided.I threw together some slides on how I tackled the problem. Working through the process manually taught me WAY more about zip files than I ever wanted to know but I am a better forensicator for it.Here are the slides:The Anatomy of A Zip File"
    }
  

  
    ,{
      "title"			: "Get Internet headers from MailItem in PowerShell",
      "link"			: "http://localhost:4000/get-internet-headers-from-mailitem-in-powershell/",
      "excerpt"		: "# Get Internet headers from MailItem in PowerShellAdd-type -assembly &quot;Microsoft.Office.Interop.Outlook&quot; | out-null$OutlookApp = new-object -comobject outlook.application$MAPI = $OutlookApp.GetNamespace(&quot;MAPI&quot;)$Message = $MAPI.GetDefaultFolder([Microsoft.Office.Interop.Outlook.OlDefaultFolders]::olFolderInbox).Items.GetLast()$Message.PropertyAccessor.GetProperty(&quot;http://schemas.microsoft.com/mapi/proptag/0x007D001E&quot;)$OutlookApp.Quit()"
    }
  

  
    ,{
      "title"			: "Reading e-mail with Powershell",
      "link"			: "http://localhost:4000/reads-e-mail-with-powershell/",
      "excerpt"		: "Occasionally in the DFIR world, you may be called upon to review e-mail files. Sometimes a lot of them. At the same time. (Before, we dive into this subject it is worth mentioning that reviewing a user&#39;s e-mail is a sensitive element of our work. Ensure reviewing e-mail falls within the scope of your investigation and you have all of the appropriate permissions before you travel down these paths...)To get comfortable with interacting with the Outlook API, I recommend working on your own machine first. I recently installed Outlook on my home machine and pointed it at one of my gmail accounts so I could share my thoughts with you good people. On a live system, here is a quick way to grab some quick info from the logged on user&#39;s inbox:Find the properties you want to read from the e-mail objectThese are the properties available for reference from each e-mail object. Most are easily parsed to strings. It is easy to see how this information could be useful to a forensic investigation.Grab the specific properties from the messages in the Inbox:Displaying this information to the screen is often not the best option considering most of us keep hundreds (if not thousands) of e-mails in our inboxes.To export to CSV:This script only works locally as the user that is currently logged on.  This is not terribly practical from an investigative standpoint.Most often you will get email files in the form of a .pst(Personal Storage Table file) or .ost(Offline Storage Table) file, perhaps recovered from a disk image. References:http://www.forensicswiki.org/wiki/Personal_Folder_File_(PAB,_PST,_OST)http://office.microsoft.com/en-us/outlook-help/introduction-to-outlook-data-files-pst-and-ost-HA010354876.aspxThis is not a big problem. You will need to open the .pst/.ost file to an instance of Outlook and then proceed as before.To read through a OST/PST:[string]$pstPath = &quot;C:\demobackup.pst&quot;#if outlook is not running, launch a hidden instance.$oProc = ( Get-Process | where { $_.Name -eq &quot;OUTLOOK&quot; } )if ( $oProc -eq $null ) { Start-Process outlook -WindowStyle Hidden; Start-Sleep -Seconds 5 }$outlook = New-Object -ComObject Outlook.Application$namespace = $outlook.GetNamespace(&quot;MAPI&quot;)$namespace.AddStoreEx($pstPath, &quot;olStoreDefault&quot;)$pstStore = ( $nameSpace.Stores | where { $_.FilePath -eq $pstPath } )$pstRootFolder = $pstStore.GetRootFolder()$inboxFolder = $pstRootFolder.Folders|? { $_.Name -eq &#39;Inbox&#39; }$inboxFolder.Items|Select SenderEmailAddress,to,subject|Export-Csv C:demoinbox.csv -NoTypeInformationSometimes you are not lucky enough to get all of the emails in one outlook object. You may find yourself in a situation where you need to read a bunch of .eml or .msg files. Fear not. I have you covered.To loop through a directory of .eml files:#A lot of the meta is stripped from the eml text format so you can really only display what you have to work withGet-ChildItem &quot;C:\demo&quot; -Filter *.eml|ForEach-Object{$adoDbStream = New-Object -ComObject ADODB.Stream$adoDbStream.Open()$adoDbStream.LoadFromFile($_.FullName)$cdoMessage = New-Object -ComObject CDO.Message$cdoMessage.DataSource.OpenObject($adoDbStream, &quot;_Stream&quot;)$cdoMessage.Fields.Item(&quot;urn:schemas:mailheader:to&quot;).Value$cdoMessage.Fields.Item(&quot;urn:schemas:mailheader:from&quot;).Value$cdoMessage.Fields.Item(&quot;urn:schemas:mailheader:subject&quot;).Value$cdoMessage.Fields.Item(&quot;urn:schemas:mailheader:sent&quot;).Value}This could use a little more polish to make it export to a csv but I am sure you guys can figure out the rest.To loop through a directory of .msg files:Get-ChildItem &quot;c:demo&quot; -Filter *.msg|`ForEach-Object{    $outlook = New-Object -comobject outlook.application    $msg = $outlook.CreateItemFromTemplate($_.FullName)    $msg | Select senderemailaddress,to,subject,Senton,body|ft -AutoSize    }SenderEmailAddress To                     Subject                            SentOn               Body------------------ --                     -------                            ------               ----email@jon.glass    jonathanglass@live.com This is the subject of the e-mail. 9/28/2014 9:47:47 PM This is the body of the e-mail....I have found the Outlook API to be extremely useful on numerous occasions for this type of work. If anyone has a better/different way to grab this data, I would love to hear it."
    }
  

  
    ,{
      "title"			: "Sysmon Continues",
      "link"			: "http://localhost:4000/queries-sysmon-for-execution-times/",
      "excerpt"		: "Q: Imaginary Reader writes &quot;Sysmon is great and all but how can I quickly search for specific information from it?&quot;A: To be honest, Imaginary Reader, I was wondering the same thing. So I threw this together to perform a very common function: return the dates and times that a process was executed.I ended up with two scripts that I jammed together; one for exact matches using -FilterXPath (which is very quick) and one for matching a partial string in the Image name (not so quick). As far as I can tell FilterXPath doesn&#39;t support partial matches.PS C:demo&gt; .ExecTimeQuery.ps1 -query &quot;C:\Program Files (x86)\Mozilla Firefox\firefox.exe&quot; -exact9/20/2014 5:33:16 PM	C:\Program Files (x86)\Mozilla Firefox\firefox.exe9/20/2014 3:42:32 PM	C:\Program Files (x86)\Mozilla Firefox\firefox.exe9/20/2014 3:38:58 PM	C:\Program Files (x86)\Mozilla Firefox\firefox.exe9/20/2014 1:01:13 PM	C:\Program Files (x86)\Mozilla Firefox\firefox.exe9/20/2014 1:01:12 PM	C:\Program Files (x86)\Mozilla Firefox\firefox.exe9/19/2014 9:02:39 PM	C:\Program Files (x86)\Mozilla Firefox\firefox.exe9/19/2014 9:02:18 PM	C:\Program Files (x86)\Mozilla Firefox\firefox.exe9/19/2014 8:50:46 PM	C:\Program Files (x86)\Mozilla Firefox\firefox.exe9/19/2014 3:26:02 PM	C:\Program Files (x86)\Mozilla Firefox\firefox.exePS C:demo&gt; .ExecTimeQuery.ps1 -query &quot;firefox&quot;9/20/2014 5:33:16 PM	C:\Program Files (x86)\Mozilla Firefox\firefox.exe9/20/2014 3:42:32 PM	C:\Program Files (x86)\Mozilla Firefox\firefox.exe9/20/2014 3:38:58 PM	C:\Program Files (x86)\Mozilla Firefox\firefox.exe9/20/2014 1:01:13 PM	C:\Program Files (x86)\Mozilla Firefox\firefox.exe9/20/2014 1:01:13 PM	C:\Program Files (x86)Mozilla Firefox\uninstallhelper.exe9/20/2014 1:01:12 PM	C:\Program Files (x86)Mozilla Firefox\uninstallhelper.exe9/20/2014 1:01:12 PM	C:\Program Files (x86)\Mozilla Firefox\firefox.exe9/19/2014 9:02:39 PM	C:\Program Files (x86)\Mozilla Firefox\firefox.exe9/19/2014 9:02:18 PM	C:\Program Files (x86)\Mozilla Firefox\firefox.exe9/19/2014 8:50:46 PM	C:\Program Files (x86)\Mozilla Firefox\firefox.exe9/19/2014 3:26:18 PM	C:\Program Files (x86)\Mozilla Firefox\uninstallhelper.exe9/19/2014 3:26:13 PM	C:\Program Files (x86)\Mozilla Firefox\uninstallhelper.exe9/19/2014 3:26:02 PM	C:\Program Files (x86)\Mozilla Firefox\firefox.exeI am looking for ways to speed this up so if anyone has any suggestions, let me know.&nbsp;"
    }
  

  
    ,{
      "title"			: "LFO with Powershell",
      "link"			: "http://localhost:4000/mentions-lfo-with-powershell/",
      "excerpt"		: "In the DFIR world, it can be important to understand the principle of Least Frequency of Occurrence (LFO). The first place I read about this was on Harlan Carvey&#39;s Blog a few years ago. The general concept is that your system processes and favorite applications should be the most abundant items in your process logs. Inversely, malware should be the least abundant by comparison as most are designed to not draw a lot of attention. Sometimes you find yourself without much of a pivot point and you are asked to &quot;find evil&quot;.With that in mind, here is an example of how you can use Sysmon to list all the processes, sorted by frequency count:PS C:Temp&gt; C:TempLFO.ps1Count Name----- ----    1 C:\cygwin64\bin\cat.exe    1 C:\cygwin64\bin\cygpath.exe    1 C:\cygwin64\bin\find.exe    1 C:\cygwin64\bin\grep.exe    1 C:\cygwin64\bin\mkgroup.exe    1 C:\cygwin64binmkpasswd.exe    1 C:\cygwin64binrebase.exe    1 C:\cygwin64binsort.exe    1 C:\Program Files (x86)\Common Files\Java\Java Update\jaureg.exe    1 C:\Program Files (x86)\Common FilesVMwareUSBvnetlib64.exe    1 C:\Program Files (x86)\FileZilla FTP Client\filezilla.exe    1 C:\Program Files (x86)\FileZilla FTP Client\fzsftp.exe    1 C:\Program Files (x86)\Inkscape\inkscape.exe    1 C:\Program Files (x86)\Java\jre7bin\javaws.exe    1 C:\Program Files (x86)\Mozilla Firefox\maintenanceservice_installer.exe    1 C:\Program Files (x86)\Mozilla Maintenance Service\maintenanceservice_tmp.exe    1 C:\Program Files (x86)\Notepad++\updatergup.exe    1 C:\Program Files (x86)\Optimizer Pro\OptProStart.exe    1 C:\Program Files (x86)\Optimizer Pro\OptProUninstaller.exe    1 C:\Program Files (x86)\Optimizer Pro\unins000.exe    1 C:\Program Files (x86)\VMware\VMware Workstation\vmware.exe    1 C:\Program Files (x86)\VMware\VMware Workstation\vmware-unity-helper.exe    1 C:\Program Files (x86)\VMware\VMware Workstation\vprintproxy.exe    1 C:\Program Files (x86)\VMware\VMware Workstation\x64vmware-vmx.exe...Just at a quick glance, I see a few things in there that might be cause for concern. For example:C:UsersGuestDownloadsinstall_flashplayer15x32_mssa_aaa_aih.exeI could crack open the Sysmon log and find out more about this if I wanted to dive deeper.Here is an example using just the 4688 event from the security logs:I realize that this is not ground breaking work but it seemed like something that others could use. "
    }
  

  
    ,{
      "title"			: "Live Process Mapping with WMI",
      "link"			: "http://localhost:4000/offers-remote-process-mapping-with-wmi/",
      "excerpt"		: "In previous posts I have discussed how you can parse a Windows event log and, through the magic of Powershell and javascript, create a visual map of process creation. But what if you are more IR than DF?Here is an example of how you can leverage the Win32_Process WMI object to pull back the necessary information for a rudimentary process map on a live machine:liveprocessmapIts the same principle as before except this time we are pulling the data for the current running processes. The tooltip is programmed to display the command line of the process. Google Chrome has a very noisy command line syntax. This is great because you don&#39;t have to install anything or reconfigure your event log auditing.Here is the code:I will throw this script up on the ol&#39; GitHub as well just for kicks.Can this script be run on a remote machine? Of course it can! (provided you have the right access)LiveProcessMap.ps1 -ComputerName REMOTECOMPUTERThe other scripts can too now that I think about it...I will be adding that feature soon.*************DISCLAIMER*************These mapping scripts are not an exact science. The script can only map the information it has to work with. There are gaps in process creation for numerous reasons. I have found that visually mapping them highlights those very quickly."
    }
  

  
    ,{
      "title"			: "GitHub?!",
      "link"			: "http://localhost:4000/uses_his_github/",
      "excerpt"		: "I received a lot of great feedback from my blog post on SysmonMapper. Most people complained about how the code was too easy to read, wasn&#39;t confusing enough and didn&#39;t involve excessive use of JavaScript and PowerShell escape characters.  To appease the masses, I wrote a substantial update to the SysmonMapper tooltip functionality.Google&#39;s Chart developer site says you can customize the ToolTip for the charts to support HTML tags and other such goodies. I am not sure this works for all charts as I was not able to get the Org Chart&#39;s tooltips to support HTML but I could have been doing something wrong.****UPDATE**** This was confirmed by the nice folks at Google. HTML tooltips no workie with the Org Chart. Oh well.However, I did get close enough to what I was looking for to post an update. Note: It can be a pain in the ass to write a script that writes another script in a different language and then passes command line syntax between them. Avoid if possible.Now the when you hover over an event you get the entire log entry displayed on screen:sysmonmapI got tired of uploading my scripts to this site SO I finally broke down and started using the GitHub account I created forever ago.https://github.com/glassdfirLook for more to come in the near future. I have a bunch of useful scripts laying around that I will post when I get the time to clean them up.I am really digging the idea of visualizing the DFIR data in meaningful ways and I am trying figure out ways to display other relevant information. If any of you have any ideas, feel free to drop me a comment."
    }
  

  
    ,{
      "title"			: "More SysmonMaps and ProcessMapper!",
      "link"			: "http://localhost:4000/shows-more-process-mapping-crap/",
      "excerpt"		: "Here is a sample of the processes running on my Windows 8 machine for the past 2 hours:Sysmonmap of Time PeriodThis shows tons of interesting information about the boot process. One thing I have noticed is that Google Chrome is noisy.Also just for kicks I coded an example of the same thing using the native Security log:To use this make sure Process Creation auditing is enabled. This has been turned on in every environment I have ever worked in but if you are following along at home, here are some fun articles to consider:http://technet.microsoft.com/en-us/library/dd941613(v=ws.10).aspxhttp://technet.microsoft.com/en-us/library/dn535776.aspxOr go here and turn it on:Then you can see logs like this:********Update Code can be found on the GitHub *********Then use some PowerShell to whip up the same Google Org chart from the last post.Then you can look at things like this:processmapNot as sexy as sysmon but this script can be used in most environments without the need to install anything.Also this PowerShell Script could be pointed at a recovered security log, perhaps from a disk image, instead of a live system.http://social.technet.microsoft.com/Forums/windowsserver/en-US/c8330f58-f2e5-4681-beb2-b2b6a185f818/how-to-geteventlog-for-offline-evtx-files?forum=winserverpowershellChange:$events = Get-WinEvent -FilterHashtable @{Logname=&#39;Security&#39;;Id=4688}|Where-Object { ( $_.TimeCreated -gt $StartDate -and $_.TimeCreated -le $StopDate)}|Sort-Object TimeCreatedTo this:$events = Get-WinEvent -path &quot;c:\pathtosecurity.evtx&quot; -FilterHashtable @{Logname=&#39;Security&#39;;Id=4688}|Where-Object { ( $_.TimeCreated -gt $StartDate -and $_.TimeCreated -le $StopDate)}|Sort-Object TimeCreated&nbsp;"
    }
  

  
    ,{
      "title"			: "SysMon!",
      "link"			: "http://localhost:4000/talks_about_sysmon/",
      "excerpt"		: "The Microsoft Sysinternals team recently released System Monitor (Sysmon), a Windows system service and device driver that, once installed on a system, remains resident across system reboots to monitor and log system activity to the Windows event log. It provides detailed information about process creations, network connections, and changes to file creation time.The timing of this release could not have worked out better for me because I had just spent two weeks reviewing Bit9&#39;s CarbonBlack product. I am not going to provide an in depth review of CarbonBlack here but I found with, a little bit of PowerShell, I could get some similar results out of Sysmon.****Disclaimer****  This is my first PowerShell project and the coding is rough. You have been warned.I started with something pretty simple:This little script allowed me to search through the Sysmon Event Logs, define a start and stop time, and if the event data matched a keyword, it would return the event to screen.Example:PS C:\Users\user\Desktop&gt; .Sysmon.ps1 -StartDate &quot;08/28/2014 21:40&quot; -StopDate &quot;08/28/2014 21:50&quot; -keyword &quot;cmd&quot;This was great. From this I can see: being launched from explorer.exe launching conhost.exePing.exe getting launched from  with the command line of  &quot;Ping google.com&quot;One of the coolest features of CarbonBlack was the ability to visualize/map the process creation over time. So I set out to make something that gave me this functionality using the Sysmon logs. I experimented with a few different graphing technologies and I have currently landed on using Google&#39;s Org Chart API to do the mapping. I know there are other and probably better ways to do this but I was looking for something high speed/low drag that didn&#39;t require installing something.With this goal in mind, I threw together SysmonMapper. Again, this is some pretty rough PowerShell but it gets the job done.PS C:Users\user\Desktop&gt; .SysmonMapper.ps1 -StartDate &quot;08/28/2014 21:40&quot; -StopDate &quot;08/28/2014 21:50&quot; -P 4332Here is another example of sysmonmapper in action: example.In the next few weeks I am going throw together some post that will highlight the functionality of this script and show some use cases that demonstrate the  power of visualizing sysmon logs.&nbsp;"
    }
  

  
    ,{
      "title"			: "Creating a Toolkit for Live Incident Response Data Acquisition and Tips for Better Timeline Analysis",
      "link"			: "http://localhost:4000/talks-about-live-response/",
      "excerpt"		: "Creating a Toolkit for Live Incident Response DataHere are the slides from last Thursdays presentation. Source code for the LR script to follow shortly."
    }
  

  
    ,{
      "title"			: "Because I consistently forget how to install Kismet from source...",
      "link"			: "http://localhost:4000/because-i-consistently-forget-how-to-install-kismet-from-source/",
      "excerpt"		: "apt-get install build-essential git subversion libncurses-dev libpcap-dev libnl-dev libpcre3-devmkdir /usr/src/compiledcd /usr/src/compiledgit clone https://www.kismetwireless.net/kismet.gitcd kismet./configuremake depmake pluginsmakemake installmake plugins-installcdÂ restricted-plugin-autowepKIS_SRC_DIR=/usr/src/compiled/kismet makeKIS_SRC_DIR=/usr/src/compiled/kismet make userinstallThen making all of configurations...."
    }
  

  
    ,{
      "title"			: "TShark Commands",
      "link"			: "http://localhost:4000/lists-tshark-commands/",
      "excerpt"		: "Here are some of the more useful commands I am using to sort through tons of pcaps I gathered:This one recursively looks for kismet pcap files and runs tshark against them. This example is looking for a count of the SSID and the privacy bit for each of the beacon frames.find . -iname &#39;*pcapdump&#39; -exec sh -c &#39;tshark -r &quot;{}&quot; -T fields -e wlan_mgt.ssid -e wlan_mgt.fixed.capabilities.privacy -R &quot;wlan.fc.type_subtype == 0x08&quot;&#39; ;| sort | uniq -c&nbsp;"
    }
  

  
    ,{
      "title"			: "War Driving",
      "link"			: "http://localhost:4000/war-driving/",
      "excerpt"		: "Here are some of the SSIDs that I collected from my new Raspberry Pi War Driving Computer:% 01 02 03 04 05 06 07 10 11 12 13 14 15 16 17 20 21 22 23 24 25 26 27 30 31 32 33 34 35 36 37 01honors 01ttwifi 03 22 36 30 01 25 03 07 15 01 35 05 37 36 21 12 07 11 35 20 02 12 26 24 10 01 24 33 23 26 26 06 04 03 34 16 33 30 21 30 14 05 05 02 01 22 10 16 27 34 33 30 34 15 04 23 23 33 14 15 05 25 23 03 12 23 27 05 34 37 30 23 24 26 35 11 36 02 04 11 06 34 23 17 35 23 25 07 05 16 22 20 11 20 15 05 26 30 32 27 12 15 31 21 04 30 22 30 11 30 33 37 14 31 26 30 03 20 23 33 01 31 34 04 23 17 12 07 30 33 13 01 10 16 11 32 07 15 10 03 07 36 17 10 22 21 15 17 12 14 22 05 25 05 24 04 15 14 02 1705B40687943406B4033735301039OBW11n-AP15t67y2d28C2135L0D2BF2MAE52WIRE2792WIRE4682WIRE5472WIRE7282WIRE9652YAC53700_Sandpiper_2193WU02402N43646SN64QBV0509925121251Pilgrim540G65CD5Q5g6FRW56X9C47C6VB7NKQ289VT18AFW2A7C571AAAaron342200231s iMacactiontecAEROSOUNDAghadoeHeightsAgua Linda WiFiaguestAHCSAHSGuestAKNJ11277alden57alphaAMX 23 divisableAndroidAPAndy&#39;s Wi-Fi Network 5GHzApplebees Free WiFiApple Network fbb1d5APWLAN04aqui1957arbysArcusAshleyAtiva54gATL-WIFIattwifiattwifibnauer-homeAustinPuppyavalonBacchusBaggyiBallybarriques_free_wirelessBarrycudabasselnet-wirelessBDIJ1belgacombelkin.0d6belkin.192belkin.2d0Belkin.34E9Belkin.3AACbelkin54gbelkin.ad2.guestsBelkin_N_Wireless_7E4927Belkin_Pre-N_765112BELL_WIFIBerryBestBuybhs-wirelessBIBig River WifiBJNPSETUPBlack Knight Wireless NetworkBlahBlandbmt-wifiboingo hotspotBoingo HotspotboundaryBOUNDARYBrinkleyBrio033BrooksrBrownBrueggers_Free_WiFiBSHSIGuestBulldogsBunkeysBusyBear-guestC7F24A6CCableWiFicamo8842011cardozaCARDOZACaribouCatFarmCBRCC805C37ccb2553fc382_EXTCCPSguestCCPSwirelessCC-Publiccc,,vbkkc cbcc-wireless-dataCEGguestCenturyLink4073CHBEXTChristine10183CICI&#39;S PIZZACisco10936Cisco21927-guestCisco64863CiscoB1611citizenwi-fiClearwireGuestCleveland&lt;cloaked&gt;CLTNETClub-GuestCoastal ClimbingCOLUMBIA5COLUMBIA7COMBATconcretecorpbbCourtyardCPCUSA1 guestCrazyBirdCruizersGuestsc@T59aj@Ma5ctsiCU-GuestsCVO Router 3D4QN9Davey WirelessDavidMaindavidsondaysinnDCFreeWiFiDCOStaffDCUTH GHIADDGuestWifiDefault_No_AccessDennys 7470Dennys 8100DesmondDossJuniorAcademydillardswifidime74pp-guestDIRECT-DJ67Ddm15ugdogsDogsDomicile_SkyFidownthehilldpostlethwaitdpostlethwait-guestdrCafe15dr.Cafe-15dr. CAFE Braodband WifiDTP53ducksoupdupontdwa-publicD-Wireless3E1TR1E7BT7EDUCAUSEAIRE.Gude-ClearEHA GuestEL DORADO-guestElectron-GSIElisirRestaurant-guestEmeraldBear-guestemergencyenclaveenclavehotengelandEnGeniusEpsonNetES-GUESTEVS_FIOSFasiNetFBI Surveillance Vanfc8c79Fellowship Hall 2nd FloorFettersFieldNetFilmar_hotspotFireballFIRESTONEFIRMFisher John Stephf l342200231s iPhoneflymanchesterFoxFi49free4allFREE_HOTEL_GUANACASTEFree WiFi- McGhee Tyson AirportFriendlysWiFiFRITZ!BoxFrontier7953Furburgers!!!!!Fuzzio0003gamache networkGaylordConventionsGet Your OwngiantsGibhomeGLHEC-66083GlobalSuiteWirelessglotfeltygodgogoinflightGold&#39;sGym-guestGolds Gym Guestgordo1Grand Makadi WIFIGroupOne-guestguestGuestGuest_AccessguestAPGuestWirelessGumP1984gunstonGYHKQHACKERMANHalethorpeHeritageHGTECHhhonorshhonors-meetingHH-WiFiHilton MeetingsHI_North_VanhjfguestHM75YM5NQJM75NMWHoliday_Inn_Denver_AirportHoliday Inn Express 3HolidayInn@GuestHolmesholyteraHome@Homehome1HOME-31F8HOME-41B2HOME-7E18HomeAPHOME-EA0BHOME-F35CHomeNetHomeNet-guestHospital Guest WirelessHotel FiftyHOTEL_GUANACASTEHotSpotSystem.com-voriginals_1HoulihansHP0D2D60HPL Public WifiHP-Print-43-LaserJet 1102HP-Print-78-Officejet 6600HSPublicHTC Portable HotspotHTXE2HyattI4LN3ibahnibahn_conferenceIfox_EmployeeIHOPi-Hotelilovereximainv2ImperiaIntel 802.11 Default SSIDInth3A1rIso5giSt357243277reItWorks!J2LJ8JadePuppy-guestJanice BurchjasonJava_Hut_CustomersJCInsuranceServicesJeffJiffylubeJiffyLube GuestJohnny-RocketsJoshNetJShouseWIFIJTCCnetACOJumpstart-P1-ebe3b4JusHiEnuffK$2cbgcqKBM2DkELlYKevin342200231s iPhoneKiawahKickerooKidani_WIFIKimptonkirbyKnight InternalKRHX4KWEEKS-guestL3T81L4YR2LanaLANDZEIT-FREEWLANLargeSpruce-guestLCCleavemealonenowLightforgelinksysLittleBearLittleBear-guestLivebox-c7a5longbow1962Lunenburglup0mMac mini van Oxia OxiamaggianoswifiMan Cave DCMarriott Conference 1Marriott_GUESTMason&#39;s StudyMB855 73:D4:E3MDC41mdtmobileMedley4menchiesmetmuseumpublicMGAN-HomemHealthmidatlanticbb13.101midatlanticbb13.103midatlanticbb13.120midatlanticbb6.40midatlanticbb6.47MiFi4620LE Jetpack 51ED SecureMiFi4620L Jetpack D224 SecureMiFi4620L Jetpack D922 SecureMiller Farm GarageMintoui-guestMitteerMM-PC_NetworkmobilywifimobilyWIFIMoghaddammonkeys guestmontana06Moose and SquirrelMorganMothermothershipMotorolaMOTOROLA-BAA05Murphys Law EZHorseplaymwguestmycloudMYLMy Little BastardmyTouch 4G HotspotNADONationalncsu-guestnetappNETGEARNETGEAR2NETGEAR32netgear40NETGEAR65NetworkingMedics3NG318nicole03Nintendo_3DS_continuous_scan_000nofreewifi4uNordstrom_Wi-FiNorthland-D732NotTheDroidsLooking4nowirzO92T3OBI-WAN-guestOffice54gohswONrouteorange12OrangePine-guestour networkP5PANERAPDSystemsPee BeePersian Empirepleased c.f. dplugnplayPocketPotbelly WiFiPricePublic1PY309300122PYA_GUESTPZ924QEOI3Radisson_GuestrandyRA_UniFircn203Reagan National WiFiReissman24GHzRenaissanceresidenceinn09residenceinn11RGXLPQSNGBNYVRAKRIH921RockstarRockStarrosaROTArouterroving1RoyalCanadianLodgeRPInetworkRumoRumorsWiFiRunyonGuestRY2U2s3cur3?salessamsammySans_CafeSANS_FOR408SANS Internet CafeSANS OfficeSANS-ROGUE01SANS-SPEAKERSANS-STAFFSANS_VIPSCARNGscbc_guestschallerSCH-I405 6C51ServiceCentralAutoSGFShalomSheraton EmiratesWiFiSheraton_GUESTSheraton Guest RoomsSheraton Meeting RoomsSheraton_New OrleansShitThatWorks!_ShopChesterfieldSHOPSONMAINshugartSideline cafeSigmaplusEOL1silverbushSitecom4ED9E5Sitecom911D68SJ11GSkinnySmittySOH 8somethingcleverSouthwestWiFiSSIDSub Express GuestSwaders APswisscomSX551DC726Ftalonne3talonne5TBB52tcwifiTD2010TeamGTelekomTempleNetTENSORTestnetThe Dupont Circle Hotelthe houseTHEHUNTSTheLabThe LabTheRestaurantCompanyTHIESthundernetTHX1138Tim Hortons WiFiTinyCat-guestTIOW5tmobileTMR2Htns_corpTobaccoCoClub-guestToo legit To QuitTreadmillTribble 2TribecaGuestTropical Smoothie Cafetsmithfam1TTXL6TWWPUBLICTXH73UdummyUE-PublicuncadundyunpluggedunstoppableUPC070337Uprising-SRUpstairsU-Turn PublicV5I64VAIVFguestVDAPL Park PlazaVeniceHomeVerizon-890L-4577Verizon AC30 8CAEVerizon DROID RAZR 3968Verizon MiFi2200 801C SecureVerizon MIFI4510L 5744 SecureVerizon MIFI4510L B4EB SecurevinovinoVIP_AccessVIPCONVirtualLabVista Sprint MiFi2200 E27 SecureVLAN8vNetSecLabvNetSecLab2VTLJLVXLI4W6CRQWashington Dulles WiFiWaterford GuestWayport_AccessWDM03WendysWendys_Wirelesswestell3691Westmont Yard Public.we WqAwEwq OWWgtBSfvz8wWfDioiw039R9FnlRDnZeZnWhittenBrothers-Guestwhodatwhodat-apeWi-DriveWiFiRSU_67ba6WiFiRSU_88f90WILLIAMSwirelessWireless Pirate 2WMATAwoodyworldwide2WRT54GLWSOPX4MQ4X9294XB5Y9xfinitywifiXHFM6xunilymcaYMCA-Shuford-wirelessZ25E1Z9P13ZG4RBZMVZyXEL01I will expand more on this later. I just thought some of these were interesting."
    }
  

  
    ,{
      "title"			: "Sharpening The ACKs?",
      "link"			: "http://localhost:4000/sharpening-the-acks/",
      "excerpt"		: "I heard a famous quote from Lincoln a while ago and it basically summaries the point of this blog.Give me six hours to chop down a tree and I will spend the first four sharpening the axe.I hope to use this a means to document my various attempts to master IT security. This is going to be my personal resource to reference for things I find noteworthy on the net or things I have tried that are worth documenting or doing again. The first few posts I plan on doing are about my lab setup at home. It is shaping up to be pretty spiffy. From there I plan on posting something at least once a week or so to justify the blog&#39;s existence and keep me motivated. We&#39;ll see where this goes.For those of you that don&#39;t know why I spelled ax wrong, feel free to bone up on TCP/IP."
    }
  



  

  

  

  

  
    ,{
      "title"			: "About the Jekyll Theme",
      "link"			: "http://localhost:4000/about/",
      "excerpt"		: "So Simple is a responsive Jekyll theme for your words and images."
    }
  

  
    ,{
      "title"			: "Theme Setup",
      "link"			: "http://localhost:4000/theme-setup/",
      "excerpt"		: "Instructions on how to install and customize the Jekyll theme So Simple."
    }
  

  

  

  

  

  

]
