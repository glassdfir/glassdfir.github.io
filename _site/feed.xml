<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="http://jon.glass/feed.xml" rel="self" type="application/atom+xml" /><link href="http://jon.glass/" rel="alternate" type="text/html" /><updated>2018-12-16T00:50:09-05:00</updated><id>http://jon.glass/</id><title type="html">Half Full of Security</title><subtitle>Sharpening the ACKs since 2013</subtitle><entry><title type="html">Hacking BRBBot</title><link href="http://jon.glass/blog/Hacking-BRBbot/" rel="alternate" type="text/html" title="Hacking BRBBot" /><published>2018-12-08T15:33:28-05:00</published><updated>2018-12-08T15:33:28-05:00</updated><id>http://jon.glass/blog/Hacking-BRBbot</id><content type="html" xml:base="http://jon.glass/blog/Hacking-BRBbot/">&lt;p&gt;Recently, in a scramble to find a final exam for my malware course that wasn’t multiple choice, I decided to revisit a sample from my youth: BRBBot.&lt;/p&gt;

&lt;p&gt;This sample can be found here:
&lt;a href=&quot;https://www.reverse.it/sample/b9cfd5f89bd282452f82cc8d323f39c6932e55cab98065bb3c2cf97bb585dc2d?environmentId=1&quot;&gt;https://www.reverse.it/sample/b9cfd5f89bd282452f82cc8d323f39c6932e55cab98065bb3c2cf97bb585dc2d?environmentId=1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I enjoyed my initial analysis of this sample because there were a couple of victories to be found from decoding the encrypted config file dropped to disk which leads to decrypting the C2 traffic. The problem I had with using this with my students is that BRBBot has been blogged about several times in the six years since it first came out. So, naturally, the only thing left to do reverse engineer the sample a smidge further and make my own flavor.&lt;/p&gt;

&lt;h3 id=&quot;config-file&quot;&gt;Config File&lt;/h3&gt;

&lt;p&gt;Hacking BRBBot largely boils down to hacking the embedding configuration file.
Upon execution, BRBBot looks in the current directory for an encrypted file called “brbconfig.tmp”.  It looks like this:
&lt;img src=&quot;/images/brbconfig.tmp.png&quot; alt=&quot;brbconfig.tmp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If this file isn’t present, BRBBot will drop it in the current directory. The encrypted data is found 112 bytes into the .rsrc portion of the exe.
&lt;img src=&quot;/images/brbconfig.tmp.embedded.png&quot; alt=&quot;Embedded File&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This file is read early in the execution and during my initial analysis, I was able to review the plaintext content of the file by simply setting a breakpoint for the return of the advapi32.dll.CryptDecrypt function as seen below.
&lt;img src=&quot;/images/CryptDecryptBreakpoint.png&quot; alt=&quot;CryptDecrypt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is all well and good but just knowing the cleartext content doesn’t give me enough information to make my own file. To me this highlights the difference between Malware Analysis and Reverse Engineering. So find out more about how the encrypted file was made, I had to do a bit of digging into the advapi32.dll.CryptDecrypt function itself.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/wincrypt/nf-wincrypt-cryptdecrypt&quot;&gt;Wincrypt.hCryptDecrypt function&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was a bit of a long journey into the bowels of Microsoft’s wincrypt libraries. I will save you the entire saga and cut to the highlights.
So to decrypt the data read from the file, a handful of things need to be provided to the CryptDecrypt function:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;hKey - A handle to the encryption key to use for the decryption. This key specifies the decryption algorithm to be used.&lt;/li&gt;
  &lt;li&gt;hHash - A handle to a hash object.&lt;/li&gt;
  &lt;li&gt;Other junk&lt;/li&gt;
  &lt;li&gt;pbData - A pointer to a buffer that contains the data to be decrypted. After the decryption has been performed, the plaintext is placed back into this same buffer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So if I scroll back up the stack I can see a few of the other Crypt functions. The first one I notice is the CryptCreateHash function accompanied by a suspiciously helpful string “YnJiYm90”.&lt;br /&gt;
&lt;img src=&quot;/images/CryptCreateHash.png&quot; alt=&quot;CryptDecrypt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So after reading the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/wincrypt/nf-wincrypt-cryptdecrypt&quot;&gt;Wincrypt.hCryptCreateHash function&lt;/a&gt; and looking up the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/SecCrypto/alg-id&quot;&gt;ALG_ID&lt;/a&gt; up, I determined that this function is creating an MD5 hash object of the “YnJiYm90” string.&lt;/p&gt;

&lt;p&gt;For those lost… this is how you could write this same functionality in Python:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import hashlib
m = hashlib.md5()
m.update(&quot;YnJiYm90&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Scrolling a bit further down we see the CryptDeriveKey function which generates cryptographic session keys derived from the base data value. So jumping back to the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/SecCrypto/alg-id&quot;&gt;ALG_ID&lt;/a&gt; table, I can see that 6801 translates to the RC4 stream encryption algorithm.
&lt;img src=&quot;/images/RC4.png&quot; alt=&quot;rc4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SO…LONG STORY SHORT…&lt;/p&gt;

&lt;p&gt;This code creates an MD5 hash of the YnJiYm90 password and uses it as an RC4 decryption key. Proof you demand? Fine. I threw the encrypted file into CyberChef and used the MD5 hash of YnJiYm90 to decrypt the payload using the RC4 operation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/brbcyberchef.png&quot; alt=&quot;CyberChef RC4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that I knew this file was RC4ed with this specific password, I could create my own configuration for my students and embed it into the executable. Easy peasy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/brbcyberchef2.png&quot; alt=&quot;Custom Config&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I had to do a hand full of other things to make this usable for my needs but I found this to be the most educational part of that journey.&lt;/p&gt;</content></entry><entry><title type="html">ADFIRWMC - 4. The Value of Unstructured Analysis</title><link href="http://jon.glass/adfirwmc/Ch4/" rel="alternate" type="text/html" title="ADFIRWMC - 4. The Value of Unstructured Analysis" /><published>2018-03-05T15:33:28-05:00</published><updated>2018-03-05T15:33:28-05:00</updated><id>http://jon.glass/adfirwmc/Ch4</id><content type="html" xml:base="http://jon.glass/adfirwmc/Ch4/">&lt;p&gt;I find performing unstructured analysis upfront to be critical part of my work flow because it tells me massive amount of contextual data upfront and it focuses the structured analysis I need to accomplish.&lt;/p&gt;

&lt;p&gt;When I say unstructed analysis, I am referring mostly to searching through the strings inside of the artifacts I have collected for keyword matches. Where do these keywords come from? Unless you are on a complete witch hunt, which unfortunately happens, there is a set of circumstances that led you to investigate this system. It could be an alert from weird proxy traffic or an antivirus hit on a file found in a User’s Temp folder.&lt;/p&gt;

&lt;p&gt;Whatever it is, these events typically have fun details that you can search for. (90% of the time it ends up being some part of a file path or part of a URL.) Let’s look at a little bit of science before we get into DFIRness of it all. This topic can get hopeless deep and veer of course quickly so I am only covering the meat and potatoes.&lt;/p&gt;

&lt;h2 id=&quot;tools-used&quot;&gt;Tools Used&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/downloads/strings&quot;&gt;Sysinternals Strings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gnuwin32.sourceforge.net/packages/grep.htm&quot;&gt;Grep For Windows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ericzimmerman.github.io/&quot;&gt;Eric Zimmerman’s Registry Explorer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;PowerShell&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;strings&quot;&gt;Strings&lt;/h2&gt;

&lt;p&gt;A string is a data type used in programming, such as an integer and floating point unit, but is used to represent text rather than numbers. Most of the words you read on a computer are stored as a string on disk or in memory. For instance, by visiting this site, your browser has probably stored a cached version of this page to a temp folder somewhere in your profile. On top of that, your browser also needs this page’s content in its process memory in order to render it. Strings get thrown all over the place by doing even the most mundane tasks. Knowing the significance of where strings are found can make your life a lot easier.&lt;/p&gt;

&lt;h3 id=&quot;ascii&quot;&gt;ASCII&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Stands for American Standard Code for Information Interchange but you will never need to know that.&lt;/li&gt;
  &lt;li&gt;Even though ASCII predates epoch and maybe even time itself, it is the basis for most modern character-encoding schemes.&lt;/li&gt;
  &lt;li&gt;Ascii is a code for representing English characters as numbers, with each letter assigned a number from 0 to 127&lt;/li&gt;
  &lt;li&gt;Not all ASCII characters are visible text.
    &lt;ul&gt;
      &lt;li&gt;Some are used to control how text is displayed like 0x0A New Line or 0x09 Tab.&lt;/li&gt;
      &lt;li&gt;Some are strictly for commands like Escape 0x1B or Delete 0x7F.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reference: https://www.asciitable.com/&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;example&quot;&gt;Example:&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;../images/AsciiStrings.png&quot; alt=&quot;Example of ASCII&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;example-displayed&quot;&gt;Example displayed:&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;../images/DisplayedAscii.png&quot; alt=&quot;Example of ASCII&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;fun-ascii-dfir-stuff-you-might-find&quot;&gt;Fun ASCII DFIR stuff you might find:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Browser History, Cookies, etc. are stored in ASCII in Chrome, FireFox (Probably others too.)
&lt;img src=&quot;../images/ChromeASCII.png&quot; alt=&quot;Example of ASCII in Chrome History&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;File Paths in Shortcuts&lt;/li&gt;
  &lt;li&gt;Antivirus Logs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;unicode&quot;&gt;Unicode&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Like ASCII but bigger&lt;/li&gt;
  &lt;li&gt;Unicode is a standard which defines the internal text coding system in almost all operating systems used in computers at present.&lt;/li&gt;
  &lt;li&gt;Version 1 started out with 65536 code points, commonly encoded in 16 bits or 2 bytes.&lt;/li&gt;
  &lt;li&gt;The current version is 6.3, using 110,187 of the available 1.1 million code points.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;example-1&quot;&gt;Example:&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;../images/unicode.png&quot; alt=&quot;Example of Unicode&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;example-displayed-1&quot;&gt;Example Displayed:&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;../images/UnicodeDisplayed.png&quot; alt=&quot;Example of Unicode&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;fun-unicode-dfir-stuff-you-might-find&quot;&gt;Fun Unicode DFIR stuff you might find:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Names of Files and Folders in $MFT, $LogFile, $UsnJrnl&lt;/li&gt;
  &lt;li&gt;Stuff in Windows Event Logs&lt;/li&gt;
  &lt;li&gt;Stuff in Windows Registry Keys&lt;/li&gt;
  &lt;li&gt;File Paths in Recycle Bin metadata files&lt;/li&gt;
  &lt;li&gt;File Paths in Shortcuts&lt;/li&gt;
  &lt;li&gt;Sticky Notes left on the Desktop&lt;/li&gt;
  &lt;li&gt;Literally almost anything with text.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-do-you-care&quot;&gt;Why Do You Care?&lt;/h3&gt;

&lt;p&gt;Imagine you are a salty beat cop 4 days from retirement. Just do it. No, really.&lt;/p&gt;

&lt;p&gt;You get a call on a tip line saying an elaborate bank heist could have been committed. The caller says the they normally use a specific kind of fake id, knock out the guards with a tranq gun, put a bunch of money in a blue bag, and fly off the roof of the bank in a fancy helicopter. 
While not perfect, unstructured analysis can provide the following details immediately:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Has there been a fake ID in the bank?
    &lt;ul&gt;
      &lt;li&gt;No? The crooks either haven’t struck or got lost on the way. It happens.&lt;/li&gt;
      &lt;li&gt;Yes? The crooks have been here!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Has there been a tranq gun in the bank?
    &lt;ul&gt;
      &lt;li&gt;No? The guards must have spotted the fake ID and disabled the crooks before they got the gun out. NICE!&lt;/li&gt;
      &lt;li&gt;Yes? Well crap. The guards may or may not have had to deal with tranq darts. Gettting serious now…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Was there a blue bag full of money in the bank?
    &lt;ul&gt;
      &lt;li&gt;No? Guards took out the crooks or the crooks were looking for Rubles instead of Dollars and just left.&lt;/li&gt;
      &lt;li&gt;Yes? Well then we can assume that the guards are subdued and the crooks are running around in the bank unchecked.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Has anyone seen a fancy helicopter recently?
    &lt;ul&gt;
      &lt;li&gt;No? Helicopter might have been ceased or ran out of gas. Happens all the time.&lt;/li&gt;
      &lt;li&gt;Yes? Well…you have been successfully robbed. Time to start dusting for prints…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;real-world-example&quot;&gt;Real World Example&lt;/h2&gt;

&lt;p&gt;Here is an interesting “crook” I found on &lt;a href=&quot;https://www.hybrid-analysis.com/sample/4231f020816eebfa0b51e252477f2769838abeb83728072185060253372a4dd0?environmentId=120&quot;&gt;Hybrid Analysis&lt;/a&gt;. This sample has been linked to APT33 and drops the TURNEDUP backdoor. For funsies, I 7zipped it up, named it “Paul_resume.7z” and sent it to myself in an email to simulate how these things go down.&lt;/p&gt;

&lt;p&gt;High level things we can look for from this sample as discovered from our detection team and/or OSINT:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Filenames
    &lt;ul&gt;
      &lt;li&gt;stikynote.exe, codexgigas_f09bb42e6c39a9714ed8a4d4191cf19e40d1919b.exe, Paul_resume.7z&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;URLs
    &lt;ul&gt;
      &lt;li&gt;googlmail.net&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;THIS IS A JOB FOR POWERSHELL!!!&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;start&lt;/span&gt;-process C:&lt;span class=&quot;se&quot;&gt;\T&lt;/span&gt;ools&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;trings.exe -ArgumentList &lt;span class=&quot;s2&quot;&gt;&quot;-nobanner -accepteula -s 2018-03-18-10-16-4&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -RedirectStandardOutput ..&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;trings.txt
&lt;span class=&quot;nb&quot;&gt;gc&lt;/span&gt; .&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;trings.txt| &lt;span class=&quot;nb&quot;&gt;Where-Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt; -imatch &lt;span class=&quot;s2&quot;&gt;&quot;Paul_resume|codexgigas|stikynote&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; | unique
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;###Example:
&lt;img src=&quot;../images/strings.png&quot; alt=&quot;reviewing strings in Powershell&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This output speaks so much about what has transpired on this machine that I don’t need to wait for structured analysis to make a containment decision. Here are the highlights that I can see in roughly 30 secs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The $MFT, $LogFile, and $USNJrnl:$J show evidence of the download attempt, successful download of the zip file, unzipping, and execution:
    &lt;ul&gt;
      &lt;li&gt;Download Attempt:
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Scripts\2018-03-18-10-16-4\c\$Extend\$USNJrnl$J: &amp;lt;&amp;lt;Paul_Resume.7z.2hvceui.partial&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;The suffix .parital is affixed to files that are in the process of being downloaded by IE and Edge.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Successful Download:
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Scripts\2018-03-18-10-16-4\c\$Extend\$USNJrnl$J: &amp;lt;Paul_Resume.7z&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;Here we see just the Paul_Resume.7z meaning it finished downloading&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Unzipping
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Scripts\2018-03-18-10-16-4\c\$Extend\$USNJrnl$J: $&amp;lt;Paul_Resume.7z.lnk&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;I don’t know the exact filepath of this Shortcut file but the majority of shortcuts are created for recently accessed files.&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Scripts\2018-03-18-10-16-4\c\$Extend\$USNJrnl$J: r&amp;lt;codexgigas_f09bb42e6c39a9714ed8a4d4191cf19e40d1919b-1.exe&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;Since this is the file inside the 7z file, we can see that it was successfully unzipped.&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Scripts\2018-03-18-10-16-4\c\Users\Username\NTUSER.DAT: C:\Users\Username\Desktop\Paul_Resume\codexgigas_f09bb42e6c39a9714ed8a4d4191cf19e40d1919b-1.exe&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;This line from the NTUSER.DAT file of from the Username profile clearly shows this was extracted to the users desktop. What stored this string in the user’s registry? Right now…it doesn’t matter. We are not parsing anything. Only triaging.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Execution:
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Scripts\2018-03-18-10-16-4\c\$Extend\$USNJrnl$J: R&amp;lt;CODEXGIGAS_F09BB42E6C39A9714E-F57CC974.pf&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;Files ending in .pf are typically associated with Windows Prefetch. This is a file that is autmagically generated when you run an execuatable to make a Windows machine more efficient. This is strong evidence of execution. We will dig into Prefetch later in this course.&lt;/li&gt;
          &lt;li&gt;This machine does not have StikyNotes install from Microsoft so references to &lt;strong&gt;StikyNote.exe&lt;/strong&gt;, &lt;strong&gt;StikyNote.tmp&lt;/strong&gt;,  and &lt;strong&gt;STIKYNOTE.EXE-EC3D9C6B.pf&lt;/strong&gt; seen in $UsnJrnl:$J, $LogFile, and $MFT tell us that the TURNEDUP backdoor was successfully ran on this machine.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Persistence:
    &lt;ul&gt;
      &lt;li&gt;This was less science and more eductated guesswork but it is rare to see a complete file path in a registry value unless it is going to be used to execute something Windows wouldn’t naturally know where to find ergo… persistence.
  A quick peek with &lt;a href=&quot;https://ericzimmerman.github.io/Software/RegistryExplorer_RECmd.zip&quot;&gt;Eric Zimmerman’s Registry Explorer&lt;/a&gt; revealed my hunch was right.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;pre&gt;
      Registry file: C:\Scripts\2018-03-18-10-16-4\c\Users\Username\NTUSER.DAT
      Key: Software\Microsoft\Windows\CurrentVersion\Run
      Last write: 2018-03-18 17:03:14
      Value: RESTART_STICKY_NOTESS (RegSz)
      Data: C:\Users\Username\AppData\Local\Temp\StikyNote.exe 
  &lt;/pre&gt;
    &lt;ul&gt;
      &lt;li&gt;Good ol’ HKCU\Software\Microsoft\Windows\CurrentVersion\Run is one of the easiest methods of making sure an executable starts when a user logs in. Makes for a good IoC to test the rest of your environment against.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have found all the evidence we need to determine that this machine needs to be removed from the network and further analysis needs be taken to determine what took place after infection. While fairly typical, this example does not represent all malware or reasons you might need to DFIR a system so your milage may vary BUT I found performing this step first almost always helps eliminate or focus structured analysis.&lt;/p&gt;

&lt;p&gt;Still not a believer? &lt;a href=&quot;http://jon.glass/blog/TwasTheGrepBeforeXmas/&quot;&gt;I wrote up a similar case a while ago&lt;/a&gt; that saved my buns before the holidays.&lt;/p&gt;</content></entry><entry><title type="html">ADFIRWMC - 3. Files of Forensic Interest</title><link href="http://jon.glass/adfirwmc/Ch3/" rel="alternate" type="text/html" title="ADFIRWMC - 3. Files of Forensic Interest" /><published>2018-03-04T15:33:28-05:00</published><updated>2018-03-04T15:33:28-05:00</updated><id>http://jon.glass/adfirwmc/Ch3</id><content type="html" xml:base="http://jon.glass/adfirwmc/Ch3/">&lt;p&gt;Each and every one of these artifacts are a deep world of details all to themselves but I tried to boil them down for this list. We will cover most of these in greater detail further in this course.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NTFS Master File Table ($MFT)
    &lt;ul&gt;
      &lt;li&gt;Description: Each file on an NTFS volume is represented by a record in a special file called the master file table (MFT).&lt;/li&gt;
      &lt;li&gt;Importance: ★★★★★
        &lt;ul&gt;
          &lt;li&gt;This contains the vast majority of the filesystem information for an NTFS volume.&lt;/li&gt;
          &lt;li&gt;Once parsed, you can establish file paths and variety of timestamps that make timelining events easier.&lt;/li&gt;
          &lt;li&gt;So much info can be derived from the MFT that I refuse to try to explain it here.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Line to add to collection script: &lt;code class=&quot;highlighter-rouge&quot;&gt;$filestocollect += 'c:\$MFT'&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;NTFS Transaction Log ($LogFile)
    &lt;ul&gt;
      &lt;li&gt;Description: NTFS is designed to be recoverable in case something borks. To do that, every file operation is logged so in case of unexpected system shutdown due to power error or critical system failure, the operating system can recover the status of file system to the previous status with saved information in $LogFile file.&lt;/li&gt;
      &lt;li&gt;Importance: ★★★☆☆
        &lt;ul&gt;
          &lt;li&gt;While you can pull off some geeky cool stuff from the data in the $LogFile, I usually don’t need to dig into it much because the MFT is largely full of the relevant info.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Line to add to collection script: &lt;code class=&quot;highlighter-rouge&quot;&gt;$filestocollect += 'c:\$LogFile'&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;NTFS Change Journal ($Usnjrnl:$J)
    &lt;ul&gt;
      &lt;li&gt;Description: Update Sequence Number Journal is a feature of NTFS which maintains a record of changes made to the volume. Whenever a change is made to the volume, a record is added to the file. Each record is identified by a 64-bit Update Sequence Number or USN. (For this reason Change Journals are sometimes called USN Journals.) Each record in the Change Journal contains the USN, the name of the file, and information about what the change was.&lt;/li&gt;
      &lt;li&gt;Importance: ★★★☆☆
        &lt;ul&gt;
          &lt;li&gt;This is another one of those files you don’t need on a day to day basis, mostly for the deep forensic dives where you need to know exactly what changes took place at the volume level during a period of time.&lt;/li&gt;
          &lt;li&gt;Using the $MFT, $LogFile, and $USNJrnl:$J in concert can paint a very high fidelity picture of file system events. Using them together can help shed light on things like timestomping.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Line to add to collection script
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$filestocollect += 'c:\$Extend\USNjrnl:$J'&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;System Registry Hives
    &lt;ul&gt;
      &lt;li&gt;Description:&lt;/li&gt;
      &lt;li&gt;Importance:&lt;/li&gt;
      &lt;li&gt;Line to add to collection script:
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$filesigs += '^c:\\Windows\\System32\\config\\.*'&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;User Registry Hives
    &lt;ul&gt;
      &lt;li&gt;Description:&lt;/li&gt;
      &lt;li&gt;Importance:&lt;/li&gt;
      &lt;li&gt;Lines to add to collection script:
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$filesigs += '^c:\\Users\\.*\\ntuser.dat$'&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$filesigs += '^c:\\Users\\.*\\AppData\\Local\\Microsoft\\Windows\\usrclass.dat$'&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Windows Event Logs
    &lt;ul&gt;
      &lt;li&gt;Description:&lt;/li&gt;
      &lt;li&gt;Importance:&lt;/li&gt;
      &lt;li&gt;Line to add to collection script:
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$filesigs += '^c:\\Windows\\System32\\winevt\\Logs\\.*.evtx$'&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Prefetch Files
    &lt;ul&gt;
      &lt;li&gt;Description:&lt;/li&gt;
      &lt;li&gt;Importance:&lt;/li&gt;
      &lt;li&gt;Line to add to collection script:
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$filesigs += '^c:\\Windows\\Prefetch\\.*\.pf$'&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Application Experience Service Artifacts
    &lt;ul&gt;
      &lt;li&gt;Description:&lt;/li&gt;
      &lt;li&gt;Importance:&lt;/li&gt;
      &lt;li&gt;Line to add to collection script:
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$filesigs += '^c:\\Windows\\AppCompat\\Programs\\Amcache.hve$'&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$filesigs += '^C:\\Windows\\AppCompat\\Programs\\RecentFilecache.bcf$'&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Jump Lists
    &lt;ul&gt;
      &lt;li&gt;Description:&lt;/li&gt;
      &lt;li&gt;Importance:&lt;/li&gt;
      &lt;li&gt;Line to add to collection script:
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$filesigs += '^c:\\Users\\.*\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\AutomaticDestinations\\.*$'&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Shortcuts
    &lt;ul&gt;
      &lt;li&gt;Description:&lt;/li&gt;
      &lt;li&gt;Importance:&lt;/li&gt;
      &lt;li&gt;Line to add to collection script:
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$filesigs += '^c:\\Users\\.*\\AppData\\Roaming\\Microsoft\\(Windows|Office)\\Recent\\.*\.lnk$'&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;USB First and Last times used
    &lt;ul&gt;
      &lt;li&gt;Description:&lt;/li&gt;
      &lt;li&gt;Importance:&lt;/li&gt;
      &lt;li&gt;Line to add to collection script:
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$filesigs += '^C:\\Windows\\inf\\setupapi.dev.log$'&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Browser Artifacts
    &lt;ul&gt;
      &lt;li&gt;Description: Turns out the internet works faster if people don’t download things they have already downloaded before. To keep track of all the places you have been and the files you have locally cached already, browsers store a ton of info in a variety of databases.&lt;/li&gt;
      &lt;li&gt;Importance: ★★★★★
        &lt;ul&gt;
          &lt;li&gt;This is a pretty important item to grab because it collects information on Windows Explorer in addition to Internet Explorer.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Lines to add to collection script:
        &lt;ul&gt;
          &lt;li&gt;IE
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$filesigs += '^c:\\Users\\.*\\AppData\\.*\\Microsoft\\Windows\\WebCache\\.*'&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;FireFox
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$filesigs += '^c:\\Users\\.*\\%\AppData\\.*\\Mozilla\\Firefox\\Profiles\\.*.default\\.*'&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Chrome
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$filesigs += '^c:\\Users\\.*\\AppData\\.*\\Google\\Chrome\\User\ Data\\Default\\.*'&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;This will grab all of the associated files from all of the profiles&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title type="html">ADFIRWMC - 2. Remote Acquisition of Windows Artifacts</title><link href="http://jon.glass/adfirwmc/Ch2/" rel="alternate" type="text/html" title="ADFIRWMC - 2. Remote Acquisition of Windows Artifacts" /><published>2018-03-03T15:33:28-05:00</published><updated>2018-03-03T15:33:28-05:00</updated><id>http://jon.glass/adfirwmc/Ch2</id><content type="html" xml:base="http://jon.glass/adfirwmc/Ch2/">&lt;p&gt;Some folks reading this are convinced that Incident Response is all done through Endpoint Detection and Response solutions and in 2018 no one drops collection scripts to gather artifacts for analysis. Those people are wrong.&lt;/p&gt;

&lt;p&gt;The first thing you should know is you will run into problems. Even when your collection tool is working perfectly; network connections drop, hard drives run out of room, antivirus and data loss prevention software will freak out… this is going to happen. Embrace it.&lt;/p&gt;

&lt;p&gt;This chapter is going to cover as many of the lessons learned as I can think of.&lt;/p&gt;

&lt;h3 id=&quot;issues-with-tools-for-remote-file-acquisition&quot;&gt;Issues with Tools for Remote File Acquisition&lt;/h3&gt;

&lt;p&gt;This can quickly get religious but I am not a fan of most commercial tools. Many do WAY too much stuff I don’t need or want for my OCD to handle. I am not going to bad mouth any particular vendor but there are a lot of solutions that just don’t work for my exact needs.&lt;/p&gt;

&lt;p&gt;Things I have found annoying about collection tools:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Some tools require special dongles which is often not practical with modern global enterprises.&lt;/li&gt;
  &lt;li&gt;Some use netcat like functionality to talk directly from your workstation to target which triggers NIDS and is blocked by NIPS.&lt;/li&gt;
  &lt;li&gt;Some won’t copy or even find some files on the target because they are locked by the OS or a third party tool like AV or DLP.&lt;/li&gt;
  &lt;li&gt;Some free tools get flagged by AV because they are not signed or what they are written in.&lt;/li&gt;
  &lt;li&gt;Some tools take too long and then produce too little.&lt;/li&gt;
  &lt;li&gt;Some tools are primarily geared for Law Enforcement and don’t cater to the enterprise teams that will probably never testify in court.&lt;/li&gt;
  &lt;li&gt;Most are WAY overpriced for what they offer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enough of my complaining. After a little science, I will explain two completely free tools you can use to carve Windows artifacts.&lt;/p&gt;

&lt;h4 id=&quot;the-underlying-mechanics-of-copying-locked-files-on-windows&quot;&gt;The Underlying Mechanics of Copying Locked Files on Windows&lt;/h4&gt;

&lt;p&gt;Before we discuss tools and examples, an understanding of the mechanics of the NTFS filesystem is helpful to ensure you can adapt and overcome when various things get in between you and your artifacts. Here is a piece of DFIRfu using completely native windows commands. Admittedly, this is more DF than IR and I know it is a lot of hexadecimal but stick with me…
&lt;img src=&quot;../images/MFTdataruns.png&quot; alt=&quot;MFT Data Runs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Breakdown&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fsutil.exe fsinfo ntfsInfo c:&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;This command shows us a bunch of useful information for how data is stored on this Volume but all we need for now is the Bytes per Cluster: 4096.&lt;/li&gt;
      &lt;li&gt;We could have used something like this:
  &lt;code class=&quot;highlighter-rouge&quot;&gt;wmic volume where (name=&quot;c:\\&quot;) get blocksize&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;This tells us that the file system allocates space to files in chunks of 4096 bytes. Even if the file is smaller, it gets the whole 4K to itself.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fsutil.exe file queryextents c:\$MFT&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;This command shows use the clusters allocated to the $MFT. I pick on the $MFT a lot in my examples for two reasons : it contains almost all of the file system information on the system and it is not directly accessible through the operating system.&lt;/li&gt;
      &lt;li&gt;This command outputs three columns of information:
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;VCN&lt;/strong&gt;: Virtual Cluster Numbers are used to sequence chunks of allocated data kinda like numbered puzzle pieces.&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Clusters&lt;/strong&gt;: This is the number of contiguous Clusters allocated per Data Run.&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;LCN&lt;/strong&gt;: Logical Cluster Numbers are basically used as addresses. This run of contiguous data begins at X number of clusters from the beginning of the volume.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo Size of $MFT in Bytes: &amp;amp;&amp;amp; set /a (0xC820 + 0x4720) * 4096&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;This is just an example of how to do math on the Windows command line.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set /a&lt;/code&gt; can be used for sorts of fun stuff like converting hex to decimal and arithmetic.&lt;/li&gt;
      &lt;li&gt;Here I am adding the number of clusters from the first data run and second data run to determine the total number of clusters allocated to the $MFT. Since we know the clusters are 4096 bytes large, we multiple to determine the number of bytes allocated to the $MFT.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dir &quot;\\vmware-host\Shared Folders\Evidence&quot;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Here I am just showing you that the $MFT we collected from the previous examples using RawCopy is in fact the same size as the crazy math we just did.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is another way to look at that information:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/MFTallocatedspace.png&quot; alt=&quot;enter image description here&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That $MFT only has two but it is common for larger files to have many data runs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/2018-Webcachedataruns.png&quot; alt=&quot;webcache data runs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This WebCacheV01.dat file has 25 runs spread out all over the volume.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Point&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To access locked files on a live Windows system, your acquisition tool needs to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Determine what physical clusters have been allocated for that file. This is stored in terms of LCN and number of clusters &lt;em&gt;(inside the $MFT as it just so happens, but we will cover that later)&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Open the Volume for direct read access.&lt;/li&gt;
  &lt;li&gt;Seek to the offset of the LCN on disk and read the numbers of clusters specified. Repeat as needed for all Data Runs.&lt;/li&gt;
  &lt;li&gt;Write the collected information to an output file in the sequence specified by the VCNs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Piece of cake right? Well the first 3 steps can trip up tools for one reason or another.&lt;/p&gt;

&lt;h3 id=&quot;building-a-toolkit-for-live-file-collection&quot;&gt;Building a Toolkit for Live File Collection:&lt;/h3&gt;

&lt;p&gt;I wish I could point you to a single perfect free tool that does exactly what you need but sadly, I can’t recommend one that checks all the blocks. So, since this is a course designed to expand your knowledge and experience, let’s just build one from scratch(ish)!&lt;/p&gt;

&lt;p&gt;Lets display a variety of PowerShell fucntionality by using fcat from SleuthKit to make a collection script:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#1. Timestamps are a great way to make unique folder names with context.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get-date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.ToString&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'yyyy-MM-dd-h-m-s'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#2. Array of Files to Collect&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$filestocollect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; @&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#3. NTFS Files&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$filestocollect&lt;/span&gt; +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'c:\$MFT'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$filestocollect&lt;/span&gt; +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'c:\$LogFile'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$filestocollect&lt;/span&gt; +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'c:\$Extend\$USNJrnl:$J'&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#4. Array for Regex Signatures for Files of Interest&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$filesigs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; @&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#User Registry Files&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$filesigs&lt;/span&gt; +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'^c:\\Users\\.*\\ntuser.dat$'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$filesigs&lt;/span&gt; +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'^c:\\Users\\.*\\AppData\\Local\\Microsoft\\Windows\\usrclass.dat$'&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#System Registry Files&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$filesigs&lt;/span&gt; +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'^c:\\Windows\\System32\\config\\.*'&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#Event Logs&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$filesigs&lt;/span&gt; +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'^c:\\Windows\\System32\\winevt\\Logs\\.*.evtx$'&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$filestocollect&lt;/span&gt; +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gci&lt;/span&gt; -Path C:&lt;span class=&quot;se&quot;&gt;\U&lt;/span&gt;sers,C:&lt;span class=&quot;se&quot;&gt;\W&lt;/span&gt;indows -Recurse -Force -File -ErrorAction SilentlyContinue | 
                     &lt;span class=&quot;nb&quot;&gt;Where-Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;.FullName -imatch &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filesigs&lt;/span&gt; -join &lt;span class=&quot;s2&quot;&gt;&quot;|&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;| % &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;.FullName &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#5. Collect Files of Interest&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filestocollect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#6. Bastardized Multiprocessing. Counts the number of fcats running and sleep if it is more than 10.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;@&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Get-Process &lt;/span&gt;fcat -ErrorAction SilentlyContinue&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.Count -ge 10&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Start-Sleep&lt;/span&gt; -Seconds 5&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;#7. Manipulating the path to get what we need&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$unixname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt; -replace &lt;span class=&quot;s2&quot;&gt;&quot;c:&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; -replace &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$outfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'{0}\\{1}'&lt;/span&gt; -f &lt;span class=&quot;nv&quot;&gt;$timestamp&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt; -replace &lt;span class=&quot;s1&quot;&gt;':'&lt;/span&gt;,&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$outdir&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$outfile&lt;/span&gt;.Substring&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0,&lt;span class=&quot;nv&quot;&gt;$outfile&lt;/span&gt;.LastIndexOf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;))
    
    #8. Building the command string
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cmdstr&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; = &quot;&quot;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cmdstr&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; += &quot;&lt;/span&gt;/c mkdir &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'{0}{1}{0}'&lt;/span&gt; -f &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;34, &lt;span class=&quot;nv&quot;&gt;$outdir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &amp;amp; &lt;span class=&quot;s2&quot;&gt;&quot;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cmdstr&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; += &quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'{0}\\{1}'&lt;/span&gt; -f &lt;span class=&quot;nv&quot;&gt;$pwd&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;fcat.exe&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; -h -f ntfs &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'{0}{1}{0}'&lt;/span&gt; -f &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;34, &lt;span class=&quot;nv&quot;&gt;$unixname&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;.&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;:  &amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cmdstr&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; += &quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'{0}{1}{0}'&lt;/span&gt; -f &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;34, &lt;span class=&quot;nv&quot;&gt;$outfile&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;
    
    #Run
    Start-Process cmd.exe -ArgumentList &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cmdstr&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -WindowStyle Hidden
    Start-Sleep -Seconds 1

}

#9. Wait until all of the fcats are done
while(@(Get-Process fcat  -ErrorAction SilentlyContinue).Count){
    write-host &quot;&lt;/span&gt;Collectors are still running...&lt;span class=&quot;s2&quot;&gt;&quot;
    Start-Sleep -Seconds 30
}
write-host &quot;&lt;/span&gt;Zipping...&lt;span class=&quot;s2&quot;&gt;&quot;
#10. Zip it real good.
Add-Type -assembly &quot;&lt;/span&gt;system.io.compression.filesystem&lt;span class=&quot;s2&quot;&gt;&quot;
[io.compression.zipfile]::CreateFromDirectory(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'{0}\\{1}'&lt;/span&gt; -f &lt;span class=&quot;nv&quot;&gt;$pwd&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$timestamp&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'{0}\\{1}.zip'&lt;/span&gt; -f &lt;span class=&quot;nv&quot;&gt;$pwd&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$timestamp&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)
write-host &quot;&lt;/span&gt;Done&lt;span class=&quot;s2&quot;&gt;&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is the platform we will add use and augment throughout the rest of the course. It’s free and it works. Strap in because the breakdown on this is going to be brutal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Breakdown&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-posh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get-date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.ToString&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'yyyy-MM-dd-h-m-s'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;This creates a string of the current time in Year-Month-Day-Hour-Minute-Second format. i.e. “2018-03-08-5-2-12”&lt;/li&gt;
      &lt;li&gt;This is helpful for creating unique folder names that are organized and easy to sort&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$filestocollect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; @&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/aboutarrays?view=powershell-6&quot;&gt;Ref: Arrays in PowerShell&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$filestocollect&lt;/span&gt; +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'c:\$MFT'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;Some files are a part of the filesystem but not direct accessible via a directory listing so we add their paths manually to $filestocollect array&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$filesigs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; @&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;This is going to be an array of Regular Expressions “RegEx” that we use to find files of interest on the target system.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$filesigs&lt;/span&gt; +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'^c:\\Users\\.*\\ntuser.dat$'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;This RegEx allows us to collect registry files from all of the profiles on a system without having to explictedly know the path for each&lt;/li&gt;
      &lt;li&gt;We are using double back slashes to “escape” the single blackslash. If we didn’t, it would be interpreted as a RegEx operator.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$filestocollect&lt;/span&gt; +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gci&lt;/span&gt; -Path C:&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;Users,C:&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;Windows -Recurse -Force -File -ErrorAction SilentlyContinue | &lt;span class=&quot;nb&quot;&gt;Where-Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;FullName -imatch &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filesigs&lt;/span&gt; -join &lt;span class=&quot;s2&quot;&gt;&quot;|&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;| % &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;FullName &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;Here we are using the gci alias for the PowerShell command Get-ChildItem which is a fancy command that can enumerate through a directory listing among other things.&lt;/li&gt;
      &lt;li&gt;We specify 2 directories for the &lt;strong&gt;-Path&lt;/strong&gt; argument to define the scope of our search.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;-Recurse&lt;/strong&gt; continues the seach throughout all of the subdirectories.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;-Force&lt;/strong&gt; adds hidden files to the search and levitates rocks.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;-File&lt;/strong&gt; is used to exclude directories from my results. This is actually important to the mechanincs of the rest of the script.&lt;/li&gt;
      &lt;li&gt;I specified SilentlyContinue for &lt;strong&gt;-ErrorAction&lt;/strong&gt; because as it tries to get directory for every file in the C:\Windows folder, there are Access Denied Errors on files I didn’t ask for and I don’t want to see them.&lt;/li&gt;
      &lt;li&gt;We redirect the output of the gci command into the Where-Object to filter our results to compare the &lt;strong&gt;FullName&lt;/strong&gt; of the file to our array of RegEx $filesigs. $filesigs is an array of strings until use &lt;strong&gt;-Join&lt;/strong&gt; to merge each signature together with a pipe which acts as an OR statement in RegEx. “Signature 1 OR Signature 2 OR …”&lt;/li&gt;
      &lt;li&gt;Finally, we redirect THAT output and grab the Fullname of the file that matches one of our signatures and add it to the $filestocollect array.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filestocollect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;This is a For loop in PowerShell. We take the array and iterate across each element until we run out.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;@&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Get-Process &lt;/span&gt;fcat -ErrorAction SilentlyContinue&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.Count -ge 10&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Start-Sleep&lt;/span&gt; -Seconds 5&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;This is a While loop in PowerShell. This statement will keep going until the condition is not True. This statement is counting the number of processes containing “fcat” and if it is greater than or equal to 10; it will sleep for 5 seconds and check again. This is being used to keep the number of fcat collectors to a reasonable amount. Is this a perfect solution? No. This is more “Tactical” Multiprocessing, meaning I want more than one instance running at a time but I don’t care enough to code true multiprocessing into the script. High yield, low drag. The process count and sleep timer can be adjusted to the desired amount of noise you want the target systems fan to make.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$unixname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt; -replace &lt;span class=&quot;s2&quot;&gt;&quot;c:&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; -replace &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;So this is a bit kludgy but fcat works with unix file paths so instead of C:\$MFT, we need to feed it /$MFT.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$outfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'{0}\\{1}'&lt;/span&gt; -f &lt;span class=&quot;nv&quot;&gt;$timestamp&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt; -replace &lt;span class=&quot;s1&quot;&gt;':'&lt;/span&gt;,&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;fcat literally just prints a files contents to screen and has no other frills like saving the file to another location so it makes us do a little work.&lt;/li&gt;
      &lt;li&gt;This line of code is responsible for creating the folder structure in the collection folder that represents where the file came from on the target.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Users\Username\ntuser.dat&lt;/code&gt; gets saved to &lt;code class=&quot;highlighter-rouge&quot;&gt;2018-03-08-5-2-12\c\Users\Username\ntuser.dat&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$outdir&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$outfile&lt;/span&gt;.Substring&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0,&lt;span class=&quot;nv&quot;&gt;$outfile&lt;/span&gt;.LastIndexOf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;In order to store the ntuser.dat file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;2018-03-08-5-2-12\c\Users\Username&lt;/code&gt; folder, we need to create it.&lt;/li&gt;
      &lt;li&gt;This line takes a substring of the $outfile path from index 0 (the begining) to the index of the last backslash argo the parent folder of the file.&lt;/li&gt;
      &lt;li&gt;Are there other commands to get the parent folder of a file? Yes, but they don’t work on files the OS can’t see like c:\$Extend\$USNJrnl:$J and I imagine this is faster anyways.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Building the command string is wonky looking but there are reasons
    &lt;ul&gt;
      &lt;li&gt;Example:
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir &quot;2018-03-08-5-2-12\c\Users\Username\&quot; &amp;amp; fcat.exe -h -f NTFS &quot;/Users/Username/ntuser.dat&quot; \\.\c: &amp;gt; &quot;2018-03-08-5-2-12\c\Users\Username\ntuser.dat&quot;
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;This is pretty simple but gets complicated because all the paths need to be encapsulated with quotes because some paths might have spaces in them.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('{0}{1}{0}' -f [char]34, $outdir)&lt;/code&gt; is an example of creating a string from other variables. I am using [char]34 because it is the cleanest method of concatenating quotes I have found. The backtick method didn’t survive accoss the cmd interpreter. This method puts a “ before and after the $outdir.&lt;/li&gt;
      &lt;li&gt;Fun fact: mkdir will make recursive folders if you ask it.&lt;/li&gt;
      &lt;li&gt;For fcat, I used -h to knock down the size of the sparse files we collect. I will cover that later. -f specifies the NTFS file system.&lt;/li&gt;
      &lt;li&gt;We are using the &amp;gt; to redirect the output of fcat into a file.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Start&lt;/span&gt;-Process cmd.exe -ArgumentList &lt;span class=&quot;nv&quot;&gt;$cmdstr&lt;/span&gt; -WindowStyle Hidden
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;Fire off the procress in a hidden window.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-posh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;@&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Get-Process &lt;/span&gt;fcat  -ErrorAction SilentlyContinue&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.Count&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Start-Sleep&lt;/span&gt; -Seconds 30&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;Since we have a few collectors going at a the same time, we need to want until they are all finished before zipping up the collection. I wrote it to check and then wait 30 secs which seems to work pretty well but ymmv.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;The rest of the code just makes a zip file by compressing the 2018-03-08-5-2-12 folder and saving to 2018-03-08-5-2-12.zip&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The folder structure ends up looking like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/tree.png&quot; alt=&quot;Folder Structure&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;securely-copying-files&quot;&gt;Securely Copying Files&lt;/h2&gt;
&lt;p&gt;We will dive more into this later but the title of this chapter is REMOTE file aquisition right? Since this zip file was created locally, we need a secure way to copy it from the remote machine. This is a bit of a cheat code BUT all of PsExec’s network communications are encrypted to prevent admin credentials being sniffed over the network traffic. We can use this to send files over a secure channel with something like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PsExec \\RemoteMachine cmd /c type C:\temp\2018-03-08-5-2-12.zip 2&amp;gt;nul 1&amp;gt; 2018-03-08-5-2-12-RemoteMachine.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is a cheap method of secure transport without having to set up network shares or netcat like direct TCP communication.
I normally use PsExec on systems with my existing token but in the rare instances that I need to use a Username and Password it will add extra crap to the file. 
At the top of the file:
&lt;img src=&quot;../images/topbottom.png&quot; alt=&quot;top&quot; /&gt;
and the bottom:
&lt;img src=&quot;../images/topbottom2.png&quot; alt=&quot;bottom&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can clip that off in PowerShell like this:&lt;/p&gt;
&lt;div class=&quot;language-posh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2018-03-08-5-2-12.zip&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 10
&lt;span class=&quot;nv&quot;&gt;$bottom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$byteEncodedContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;System.IO.File]::ReadAllBytes&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;.FullName&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$truncatedByteEncodedContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$byteEncodedContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$top&lt;/span&gt;..&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$byteEncodedContent&lt;/span&gt;.Length - &lt;span class=&quot;nv&quot;&gt;$bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Set-Content&lt;/span&gt; -value &lt;span class=&quot;nv&quot;&gt;$truncatedByteEncodedContent&lt;/span&gt; -encoding &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; -path &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;.FullName&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content></entry><entry><title type="html">ADFIRWMC - 1. Windows Remote Administration for Incident Responders</title><link href="http://jon.glass/adfirwmc/Ch1/" rel="alternate" type="text/html" title="ADFIRWMC - 1. Windows Remote Administration for Incident Responders" /><published>2018-03-02T15:33:28-05:00</published><updated>2018-03-02T15:33:28-05:00</updated><id>http://jon.glass/adfirwmc/Ch1</id><content type="html" xml:base="http://jon.glass/adfirwmc/Ch1/">&lt;p&gt;Without a system administration background, many incident responders struggle with basic tasks like remotely starting and stopping processes on target machines. Inversely, Incident Responders with sysadmin experience are often faster and more effective. The more familiar you are with native Windows commands, the faster your can operate.&lt;/p&gt;

&lt;p&gt;While this course cannot hope to supplant the experience gained by years at your average help desk, I will try to highlight some of the more helpful techniques that get me from A to B.&lt;/p&gt;

&lt;h3 id=&quot;topics&quot;&gt;Topics&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Windows Management Instrumentation&lt;/li&gt;
  &lt;li&gt;Microsoft Management Console&lt;/li&gt;
  &lt;li&gt;PsExec&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;wmi&quot;&gt;WMI&lt;/h3&gt;
&lt;p&gt;One of the most practical skills you can have as a Windows Admin is an understanding of WMI. Windows Management Instrumentation (WMI) is the infrastructure for management data and operations on Windows-based operating systems.&lt;/p&gt;

&lt;h4 id=&quot;wmi-terminology&quot;&gt;WMI Terminology&lt;/h4&gt;

&lt;p&gt;The four big vocabulary terms we are going to use for the section are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Namespaces: A hierarchical structure of WMI objects used to organize Classes&lt;/li&gt;
  &lt;li&gt;Classes: A WMI Object that contains fun stuff like Properties and Methods&lt;/li&gt;
  &lt;li&gt;Property: Information that can be retrieved.&lt;/li&gt;
  &lt;li&gt;Method: Actions that can be taken.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a much better explanation, I recommend: 
https://www.darkoperator.com/blog/2013/1/31/introduction-to-wmi-basics-with-powershell-part-1-what-it-is.html&lt;/p&gt;

&lt;h4 id=&quot;wmi-example&quot;&gt;WMI Example&lt;/h4&gt;
&lt;p&gt;To get a list of all processes running on a workstation that match a certain name with process IDs, you could use something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT processid,name FROM Win32_Process where name='powershell.exe'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Term&lt;/th&gt;
      &lt;th&gt;Value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Namespace&lt;/td&gt;
      &lt;td&gt;Isn’t defined so the default (root\CIMV2) is assumed&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Class&lt;/td&gt;
      &lt;td&gt;Win32_Process&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Properties&lt;/td&gt;
      &lt;td&gt;processid and name&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Methods&lt;/td&gt;
      &lt;td&gt;Not used because we are just listing process info&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;wql&quot;&gt;WQL&lt;/h4&gt;

&lt;p&gt;WMI Query Language (WQL) is a bastardized version of SQL used to administer WMI. WQL is a deep dark rabbit hole of COM objects that I refuse to try to document but the main statements you need to know are &lt;strong&gt;SELECT, FROM, and WHERE&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;“WQL looks neat but where do I use it?” Great question!  WMI is accessible in a variety of flavors on modern Windows systems. You can leverage WQL with these handy native Windows solutions:&lt;/p&gt;
&lt;h4 id=&quot;powershell&quot;&gt;PowerShell&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SELECT processid,name FROM Win32_Process where name='powershell.exe'&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Get-WmiObject&lt;/span&gt; -query &lt;span class=&quot;nv&quot;&gt;$query&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;../images/2018-02-21125653-WindowsPowerShell.png&quot; alt=&quot;PowerShell WMI&quot; /&gt;
Reference: https://blogs.technet.microsoft.com/heyscriptingguy/2012/07/10/three-easy-ways-to-use-powershell-and-wql-to-get-wmi-data/&lt;/p&gt;
&lt;h4 id=&quot;wmic&quot;&gt;WMIC&lt;/h4&gt;
&lt;p&gt;The WMI command-line (WMIC) utility provides a command-line interface for WMI. WMIC is one of my favorite command line applications because it condenses a lot of the&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; wmic /node:computername process where (name = &quot;cmd.exe&quot;) get processid,name
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;../images/2018-02-21132727-CommandPrompt.png&quot; alt=&quot;WMIC Example&quot; title=&quot;WMIC&quot; /&gt;
References: 
https://msdn.microsoft.com/en-us/library/aa394531(v=vs.85).aspx
http://jon.glass/blog/lists-some-wmic-commands/&lt;/p&gt;

&lt;h4 id=&quot;visual-basic-scripting-example-more-or-less-deprecated&quot;&gt;Visual Basic Scripting Example (more or less deprecated)&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vbscript&quot; data-lang=&quot;vbscript&quot;&gt;strComputer = &quot;.&quot;
Set objWMIService = GetObject(&quot;winmgmts:\\&quot; &amp;amp; strComputer &amp;amp; &quot;\root\CIMV2&quot;)
Set colItems = objWMIService.ExecQuery( &quot;SELECT * FROM Win32_Process WHERE name=’cscript.exe’&quot;,,48)
For Each objItem in colItems
    Wscript.Echo &quot;Name: &quot; &amp;amp; objItem.Name
    Wscript.Echo &quot;ProcessId: &quot; &amp;amp; objItem.ProcessId
Next&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While VBS is not my first choice, it is good to at least be aware of it because it is still very much in use by admins and attackers alike.&lt;/p&gt;

&lt;p&gt;Depending on what 3rd party tools you have in your environment you might be able to utilize these:&lt;/p&gt;
&lt;h4 id=&quot;python&quot;&gt;Python&lt;/h4&gt;
&lt;p&gt;The Python WMI module is a lightweight wrapper on top of the pyWin32_ extensions.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;wmi&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wmi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WMI&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Win32_Process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;python.exe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;bigfix-relevance&quot;&gt;BigFix Relevance&lt;/h4&gt;

&lt;p&gt;You might not have this in your environment but many companies have clients on endpoints that are designed for system administration or patching that can to utilized to perform incident response functions as well. This is especially true in SMBs where the security guy is also the patching and sysadmin team.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(selects &quot;processid,name from Win32_Process where name = 'explorer.exe'&quot; of wmi)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;../images/2018-bigfix.png&quot; alt=&quot;BigFix WMI Relevance&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;wmi-classes-of-dfir-interest&quot;&gt;WMI classes of DFIR interest&lt;/h4&gt;
&lt;p&gt;There is a lot of super geeky DFIR information you can pull out of WMI properties and methods that can give you wizard like powers over remote machines. Here are a few of my favorites :&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Class&lt;/th&gt;
      &lt;th&gt;Properties&lt;/th&gt;
      &lt;th&gt;Methods&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Win32_Process&lt;/td&gt;
      &lt;td&gt;CommandLine CreationDate Description ExecutablePath Name OSName ParentProcessId ProcessId SessionId&lt;/td&gt;
      &lt;td&gt;AttachDebugger Create GetOwner GetOwnerSid Terminate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Win32_Service&lt;/td&gt;
      &lt;td&gt;Description DisplayName InstallDate Name PathName ProcessId ServiceType Started StartMode StartName State Status&lt;/td&gt;
      &lt;td&gt;Change ChangeStartMode Create Delete PauseService ResumeService StartService StopService&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Win32_LogonSession&lt;/td&gt;
      &lt;td&gt;AuthenticationPackage Description InstallDate LogonId LogonType Name StartTime Status&lt;/td&gt;
      &lt;td&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Win32_NetworkLoginProfile&lt;/td&gt;
      &lt;td&gt;AccountExpires BadPasswordCount Description FullName LastLogoff LastLogon LogonServer Name NumberOfLogons PasswordAge PasswordExpires PrimaryGroupId Privileges Profile UserId UserType&lt;/td&gt;
      &lt;td&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Win32_LogicalDisk&lt;/td&gt;
      &lt;td&gt;BlockSize Description DeviceID DriveType FileSystem FreeSpace MediaType Name Size VolumeName VolumeSerialNumber&lt;/td&gt;
      &lt;td&gt;Chkdsk Reset SetPowerState&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Win32_StartupCommand&lt;/td&gt;
      &lt;td&gt;Caption Command Description Location Name SettingID User UserSID&lt;/td&gt;
      &lt;td&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Win32_OperatingSystem&lt;/td&gt;
      &lt;td&gt;BootDevice BuildNumber CurrentTimeZone InstallDate LastBootUpTime LocalDateTime Locale Manufacturer Name NumberOfProcesses NumberOfUsers Organization OSArchitecture OSType SerialNumber ServicePackMajorVersion ServicePackMinorVersion SystemDrive&lt;/td&gt;
      &lt;td&gt;Reboot SetDateTime Shutdown&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;putting-it-to-work&quot;&gt;Putting It To Work&lt;/h4&gt;

&lt;p&gt;Scenario: Your detection team says a user on RemoteMachine received a malicious Word document that downloads a Remote Access Trojan that your antivirus doesn’t have a signature for. From your threat intelligence, this malicious Word document uses a macro to drop an EvilFile.exe in the users Temp directory.&lt;/p&gt;

&lt;p&gt;Let’s verify the alert..maybe the user didn’t open the Word doc…(yeah right)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wmic /node:RemoteMachine process where (name like '%scchost.exe%') get executablepath,processid,parentprocessid /format:list
    ExecutablePath=C:\Users\Username\AppData\Local\Temp\Scchost.EXE
    ParentProcessId=1040
    ProcessId=3712
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Crap. Looks like the user might have clicked on it. Let’s verify that parent process just to be sure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wmic /node:RemoteMachine process where (ProcessId = 1040) get executablepath /format:list
    ExecutablePath=C:\Program Files\Microsoft Office\Office16\WINWORD.EXE
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Double crap. Looks like this is a confirmed compromise of a workstation. 
For fun and containment, let’s kill that malicious process using a WMI method:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wmic /node:RemoteMachine process where (name ='Scchost.exe') CALL Terminate
Executing (\\RemoteMachine\ROOT\CIMV2:Win32_Process.Handle=&quot;3712&quot;)-&amp;gt;Terminate()
Method execution successful.
Out Parameters:
instance of PARAMETERS
{
        ReturnValue = 0;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For even MORE fun, like copy that malicious file to an analysis share so we can get a better look at it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wmic /node:RemoteMachine process call create &quot;xcopy  /Y C:\Users\Username\AppData\Local\Temp\Scchost.EXE \\AnalysisShare\Scchost.exe.bin&quot; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For a lot less fun, let’s call the User explain the situation, shut it down remotely, and go get the workstation to determine what this malware did :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wmic /node:RemoteMachine os call Shutdown
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: This scenario is largely BS. Malware isn’t usually this easy to kill and as more work becomes remote, it is increasingly rare to physically walk over to the user’s cube and take their workstation.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;mmc&quot;&gt;MMC&lt;/h3&gt;
&lt;p&gt;I imagine I scared some of off you with all that “coding” and “command line stuff”. While there are GUIer options to accomplish Windows administration tasks, they aren’t as efficient or sexy. If you are against coding all together, there is an X at the top right or left of your browser. We can part ways now and no one’s feelings need to get hurt. For the sake of completeness, I will cover MMC which is a GUI and can do Windows admin tasks but it is not my “go to”.
According to the big M, the Microsoft Management Console (MMC) is an extensible common presentation service for management applications.
&lt;img src=&quot;../images/2018-02-22-MMC.png&quot; alt=&quot;MMC&quot; title=&quot;MMC&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This console gives you access to some a lot of administration tools.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Computer Management Snap-In
    &lt;ul&gt;
      &lt;li&gt;System Tools
        &lt;ul&gt;
          &lt;li&gt;Task Scheduler
            &lt;ul&gt;
              &lt;li&gt;Good for running processes remotely, shutting down workstations, and whatnot&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Event Viewer
            &lt;ul&gt;
              &lt;li&gt;Good for remotely viewing logs but not great&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Local Users and Groups
            &lt;ul&gt;
              &lt;li&gt;Good for administering local user accounts&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Device Manager
            &lt;ul&gt;
              &lt;li&gt;Handy when you need to see if a USB is plugged in&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Storage
        &lt;ul&gt;
          &lt;li&gt;Disk Management
            &lt;ul&gt;
              &lt;li&gt;Also handy for seeing if external media is plugged in&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Services and Applications
        &lt;ul&gt;
          &lt;li&gt;Services&lt;/li&gt;
          &lt;li&gt;Allows for administration of Windows services. (start, pause, stop)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don’t use this much for IR but if you are in an environment where you don’t have any other tools, this is a native GUI solution that might get you where you need to go.&lt;/p&gt;

&lt;h3 id=&quot;pstools&quot;&gt;PsTools&lt;/h3&gt;

&lt;p&gt;Way way way back in 1996, Mark Russinovich and Bryce Cogswell created a little company called Winternals Software LP that created a bunch of software to help administer Windows 2000 boxes. Long story short…in 2006 Microsoft bought the company and all their tools now known as &lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/&quot;&gt;Windows Sysinternals&lt;/a&gt;. There is a cornucopia of awesome tools that I will mention throughout the duration of this course but for now we are going to focus on some of the PsTools Suite I find most handy. While you can accomplish all of these functions via WMI via PowerShell or WMIC, these tools are helpful for those who prefer tools with a dedicated tasks and help menus. There is absolutely no shame in that but I found, the more comfortable I become with WMI scripting, the less I needed most of this suite.&lt;/p&gt;

&lt;h4 id=&quot;windows-admin-using-pstools-suite&quot;&gt;Windows Admin using PsTools Suite&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Tool&lt;/th&gt;
      &lt;th&gt;Purpose&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/downloads/psexec/&quot;&gt;PsExec&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;execute processes remotely&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/downloads/pskill/&quot;&gt;PsKill&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;kill processes by name or process ID&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/downloads/pslist/&quot;&gt;PsList&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;list detailed information about processes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/downloads/psloggedon/&quot;&gt;PsLoggedOn&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;see who’s logged on locally and via resource sharing&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/downloads/psservice/&quot;&gt;PsService&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;view and control services&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/downloads/psshutdown/&quot;&gt;PsShutdown&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;shuts down and optionally reboots a computer&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Most of the PsTools suites are fairly straightforward and require almost no explanation but PsExec is robust enough that it bears covering.&lt;/p&gt;

&lt;h4 id=&quot;psexec&quot;&gt;PsExec&lt;/h4&gt;
&lt;p&gt;From &lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/downloads/psexec&quot;&gt;Microsoft&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“PsExec is a light-weight application that lets you execute processes
on other systems, complete with full interactivity for console
applications, without having to manually install client software.
PsExec’s most powerful uses include launching interactive
command-prompts on remote systems and remote-enabling tools like
IpConfig that otherwise do not have the ability to show information
about remote systems.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;PsExec is to DFIR as a good blaster is to Han Solo.  I can’t tell you how many times PsExec has saved my bacon. Not to mention how many times I have pulled off some nifty DFIRfu with it’s various options. Everytime I read PsExec’s Usage I learn something new that it does.&lt;/p&gt;

&lt;h5 id=&quot;example-elevating-to-system-account&quot;&gt;Example: Elevating to System Account:&lt;/h5&gt;
&lt;p&gt;One of my favorite tricks is to run remote processes as the System account and not a puny User account as seen below:
&lt;img src=&quot;../images/2018-02-22114324-192.168.164.130cmd.png&quot; alt=&quot;PsExec As System&quot; /&gt;
This grants a higher level of privileges and leaves less of a footprint on the remote machine. I rarely want to use my own account for anything on a remote machine unless I have to.&lt;/p&gt;

&lt;p&gt;Pro Tip: If you are copying evidence from a remote machine to a collection share using PsExec to run as the system account, make sure the share is configured to grant Computer account of the target workstation write permission or you will get errors that will run you in circles. Doesn’t matter if your admin account has rights if you are running as the Computer.&lt;/p&gt;
&lt;h5 id=&quot;example-copying-an-utility-and-then-executing-it-on-a-remote-system-&quot;&gt;Example: Copying an Utility and then Executing it on a Remote System :&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;../images/2018-02-25130802-AdministratorCommandPrompt.png&quot; alt=&quot;enter image description here&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PsExec.exe \\192.168.164.130 -c RawCopy.exe /FileNamePath:C:0 /OutputPath:\\ForensicServer\dropbox\ /OutputName:$MFT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There is a lot going on in this example so let’s break it down…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I am using PsExec to remotely execute RawCopy on a remote host with an IP of 192.168.164.130.&lt;/li&gt;
  &lt;li&gt;Since the remote host probably doesn’t have RawCopy, a third party tool, laying around, I used the &lt;strong&gt;-c&lt;/strong&gt; flag to copy the program over to the remote system. The &lt;strong&gt;-f&lt;/strong&gt; flag is used just in case it was already there so we can overwrite it.&lt;/li&gt;
  &lt;li&gt;RawCopy’s options are fairly straightforward. I am copying the Master File Table (record 0) from C:\$MFT on the remote machine to  my \\ForensicServer\dropbox share for analysis&lt;/li&gt;
  &lt;li&gt;After RawCopy finished, I check my dropbox folder to confirm the $MFT landed safely.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;example-interacting-with-the-user&quot;&gt;Example: Interacting with the User:&lt;/h5&gt;
&lt;p&gt;PsExec runs a console session by default but can be configured to interact with the logged on user’s session using the &lt;strong&gt;-i&lt;/strong&gt; option. This is helpful in those rare instances where you need to user to see something you are doing. 99% of the time the user is going to be logged in under the second session or session 1. It’s not often but I have used this a couple times over the years.
In this example, I use PsExec to create two instances of notepad.exe on my local machine. One is in user session and visible, the other is not. 
&lt;img src=&quot;../images/2018-02-26140426-Sessions.png&quot; alt=&quot;enter image description here&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;-d&lt;/strong&gt; flag is used to detach the PsExec session from the child process so we don’t have to wait until notepad exits to continue. This is very handy for DFIR collection scripts that might take a while. Detach the process and let it do it’s thing. I like to use &lt;strong&gt;-d&lt;/strong&gt; on targets that are on flakey VPN connections so that if the connection drops, the process is still running on the remote system. The obvious downside is, you can’t interact with the session after it is detached.&lt;/p&gt;

&lt;h5 id=&quot;example-running-commands-on-multiple-machines&quot;&gt;Example: Running commands on multiple machines&lt;/h5&gt;
&lt;p&gt;PsExec allows you to perform administrative tasks on multiple workstations but you can only interact with one at a time. Here is an example of getting a command shell on two different machines:
&lt;img src=&quot;../images/2018-02-27082319-AdministratorCommandPrompt.png&quot; alt=&quot;enter image description here&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PsExec.exe \\DESKTOP-132B1OL,192.168.164.130 cmd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I can’t access the second machine until I exit the session with the first one. To speed that process up, using the &lt;strong&gt;-d&lt;/strong&gt; to detach the session from the process will make it much faster.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/2018-02-26183825-AdministratorCommandPrompt.png&quot; alt=&quot;enter image description here&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When would you ever need to do this? Let’s say you want to collect artifacts from the two machines involved in an alert you received from your detection team. You could bust out your PsExec skills and do something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/2018-02-27082319-AdministratorCommandPrompt.png&quot; alt=&quot;Advanced PsExec Copy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Breakdown:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#Bit of a cheat code to copy a file over before using it.
\tools\PsExec.exe \\DESKTOP-132B1OL,RemoteMachine -d -f -c \Tools\RawCopy.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What does this do? PsExec will copy \Tools\RawCopy.exe to the c:\Windows folder of DESKTOP-132B1OL and try to run it. Same with RemoteMachine. RawCopy needs all sorts of command line options so it will gracefully exit BUT the tool has be in place. Why didn’t i use the &lt;strong&gt;-c&lt;/strong&gt; switch? I’ll show you:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\tools\PsExec.exe \\DESKTOP-132B1OL,RemoteMachine -d cmd /c c:\Windows\RawCopy.exe /FileNamePath:C:0 /OutputPath:&quot;\\vmware-host\Shared Folders\Evidence\&quot; /OutputName:^%computername^%-$MFT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On my evidence share, I am looking to have one file from each of these workstations. To make sure I can tell the two $MFTs apart, I used the environment variable %COMPUTERNAME% from the remote computer for file name passed to RawCopy.&lt;/p&gt;

&lt;p&gt;To access the remote environment variables, I needed to use cmd to launch RawCopy which means I couldn’t use the &lt;strong&gt;-c&lt;/strong&gt; to copy it over in one foul swoop. By using the carets to escape the percent signs, like this &lt;code class=&quot;highlighter-rouge&quot;&gt;^%computername^%-$MFT&lt;/code&gt;, you can pass the variable to the next command interpreter. If you don’t, your command prompt will interpret it and save all of the file names as YOUR computer name and overwrite each other. Took me a second to figure that out.&lt;/p&gt;

&lt;p&gt;If all this sounds convoluted, you’re paying attention. The point of this course highlight some more complicated methods of approaching the litany of challenges you will encounter during your DFIR day.&lt;/p&gt;</content></entry><entry><title type="html">ADFIRWMC - 0. Disclaimers</title><link href="http://jon.glass/adfirwmc/Ch0/" rel="alternate" type="text/html" title="ADFIRWMC - 0. Disclaimers" /><published>2018-03-01T15:33:28-05:00</published><updated>2018-03-01T15:33:28-05:00</updated><id>http://jon.glass/adfirwmc/Ch0</id><content type="html" xml:base="http://jon.glass/adfirwmc/Ch0/">&lt;h2 id=&quot;disclaimers&quot;&gt;0. Disclaimers&lt;/h2&gt;

&lt;h3 id=&quot;you-have-to-dig&quot;&gt;You have to dig&lt;/h3&gt;
&lt;p&gt;As I built this course, I started realizing that perhaps the reader might not understand everything I am talking about. DFIR is not a field where everyone can know everything. It’s just too wide and too deep. Attempting to define every term and provide background on all material would bloat this project beyond scope and diminish the value. If I didn’t cover something, you might have to look it up. Searching for information is the crux of this job.&lt;/p&gt;

&lt;h3 id=&quot;i-tried-to-keep-it-cheap&quot;&gt;I tried to keep it cheap&lt;/h3&gt;
&lt;p&gt;In an effort to limit barriers to education, I tried to limit the examples in this course to native, open source, or readily available free tools. Does that excluding commecial tools limit the completeness of this course? Yes, but this course is about developing your skills and not lining a vendor’s pocket. Sadly, you are going to need a Windows 7 or newer system to play with to put a lot of this to use.&lt;/p&gt;

&lt;h3 id=&quot;audience&quot;&gt;Audience&lt;/h3&gt;
&lt;p&gt;I think this course is written to provide examples of DFIR techniques for two groups of people:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Folks that have been in Information Security in one capacity or another and are looking to get into more hands on DFIR work.&lt;/li&gt;
  &lt;li&gt;Others who might find this information useful or interesting.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This should not be the first computer related course you attempt.&lt;/p&gt;

&lt;h3 id=&quot;omissions-and-errors&quot;&gt;Omissions and Errors&lt;/h3&gt;
&lt;p&gt;There are two reasons I didn’t include something in this course:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;I didn’t know about it. &lt;em&gt;It happens. Often.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;I thought you wouldn’t immediately benefit from knowing it. This career field is deep, wide, and almost any fact about how things work can be refuted with an exception. This course is not designed to be extremely comprehensive, just helpful.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Either way, feel free to send me feedback and I will take a look.&lt;/p&gt;
&lt;h3 id=&quot;organization&quot;&gt;Organization&lt;/h3&gt;

&lt;p&gt;This course will cover a lot of material and most of it will be shown by example. While that is helpful in some respects, it can leave some topics less explicitly documented and more demonstrated during the course of scenario. Tools and command line utilities are going to be covered in this manner because I am not wasting our collective time documenting a technique AND all of a tool’s command line functions when you can easily find that information elsewhere.&lt;/p&gt;

&lt;h3 id=&quot;tone&quot;&gt;Tone&lt;/h3&gt;
&lt;p&gt;This is meant to be informal. I authored 3 university courses last year and one of the consistent items of feedback I received was how well the frankly dry material was conveyed. While that might come across as unprofessional and lacking academic polish, I find it makes the material more digestible and that is point of learning, right?&lt;/p&gt;</content></entry><entry><title type="html">Find Windows Filetime objects in Binary Data</title><link href="http://jon.glass/tips/LookForWindowsTimestamps/" rel="alternate" type="text/html" title="Find Windows Filetime objects in Binary Data" /><published>2018-02-20T15:33:28-05:00</published><updated>2018-02-20T15:33:28-05:00</updated><id>http://jon.glass/tips/LookForWindowsTimestamps</id><content type="html" xml:base="http://jon.glass/tips/LookForWindowsTimestamps/">&lt;p&gt;I did some reverse engineering of 3rd party software in a client environment and wrote this script to help  determine how they logged events.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;conv_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;il&quot;&gt;116444736000000000L&lt;/span&gt; 
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;newTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000000&lt;/span&gt;  
   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;newTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
   &lt;span class=&quot;c&quot;&gt;#if the datestamp happens between Jan 1 2000 and now.&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;946684800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Y/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;m/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;H:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;M:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;S&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'rb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;rawdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;chunkoffset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;rawdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Read the entire file into memory&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Count the number of timestamps&lt;/span&gt;
       
       &lt;span class=&quot;n&quot;&gt;chunkoffset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;possible_timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#Try to format these 8 bytes as a timestamp&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;formatted_timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conv_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;L&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;possible_timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                                               &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;L&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;possible_timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatted_timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                   &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Offset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunkoffset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatted_timestamp&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# add one to the timestamp count&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Something broke...&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Try the next 8 bytes&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content></entry><entry><title type="html">Remotely Change BitLocker Protections</title><link href="http://jon.glass/tips/ChangeBitlockerKeys/" rel="alternate" type="text/html" title="Remotely Change BitLocker Protections" /><published>2018-02-20T15:33:28-05:00</published><updated>2018-02-20T15:33:28-05:00</updated><id>http://jon.glass/tips/ChangeBitlockerKeys</id><content type="html" xml:base="http://jon.glass/tips/ChangeBitlockerKeys/">&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#Delete existing protections&lt;/span&gt;
manage-bde.exe -cn ComputerName -protectors -delete c: -Type TPMAndPIN
manage-bde.exe -cn ComputerName -protectors -delete c: -Type RecoveryPassword
&lt;span class=&quot;c1&quot;&gt;#Now that all of the previous Protectors are gone, let's add our own.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#Let's add a new password that only the security team will need to know.&lt;/span&gt;
manage-bde.exe -cn ComputerName -protectors -add c: -TPMandPIN SuperDuperPassword
&lt;span class=&quot;c1&quot;&gt;#As a backup, let's also add a couple of recovery keys just in case noone can find the sticky note with the password.&lt;/span&gt;
manage-bde.exe -cn ComputerName -protectors -add c: -RecoveryPassword 111111-111111-111111-111111-111111-111111-111111-111111 
manage-bde.exe -cn ComputerName -protectors -add c: -RecoveryPassword 222222-222222-222222-222222-222222-222222-222222-222222 
manage-bde.exe -cn ComputerName -on c:&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content></entry><entry><title type="html">Using FullEventLogView From Nirsoft</title><link href="http://jon.glass/tips/FullEventLogView/" rel="alternate" type="text/html" title="Using FullEventLogView From Nirsoft" /><published>2018-02-19T15:33:28-05:00</published><updated>2018-02-19T15:33:28-05:00</updated><id>http://jon.glass/tips/FullEventLogView</id><content type="html" xml:base="http://jon.glass/tips/FullEventLogView/">&lt;p&gt;Parsing Windows Event Logs from an incident collection can be a pain without the right tools. IMHO, the native Windows Event Viewer is largely garbage.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.nirsoft.net/utils/full_event_log_view.html&quot;&gt;Download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I found this parser to be fast, free, and fully featured. Has a good GUI and CLI.&lt;/p&gt;</content></entry><entry><title type="html">Setting up ELK on my MacBook (Part 2)</title><link href="http://jon.glass/blog/grep-like-you-mean-it/" rel="alternate" type="text/html" title="Setting up ELK on my MacBook (Part 2)" /><published>2017-03-11T15:33:28-05:00</published><updated>2017-03-11T15:33:28-05:00</updated><id>http://jon.glass/blog/grep-like-you-mean-it</id><content type="html" xml:base="http://jon.glass/blog/grep-like-you-mean-it/">&lt;p&gt;Now that I have Elasticsearch and Kibana up and running, I need to start feeding in those sweet, sweet logs.
Normally, one would setup LogStash to import these logs into Elasticsearch but those clever cats at Elastic have created Beats to help. &lt;a href=&quot;https://www.elastic.co/products/beats/winlogbeat&quot;&gt;Beats&lt;/a&gt; is the platform for single-purpose data shippers. They install as lightweight agents and send data from hundreds or thousands of machines to Logstash or Elasticsearch. In this post I am going to cover installing winlogbeat and packetbeat on my Windows 10 VM and configuring them to talk to my Elasticsearch running on my MacBook.&lt;/p&gt;
&lt;h3 id=&quot;virtual-machine-setup&quot;&gt;0. Virtual Machine Setup&lt;/h3&gt;
&lt;p&gt;Although not extremely important to the process below, here is the high level notes about the VM:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;OS Name:                   Microsoft Windows 10&lt;/li&gt;
  &lt;li&gt;OS Version:                10.0.14393 N/A Build 14393&lt;/li&gt;
  &lt;li&gt;System Model:              VirtualBox&lt;/li&gt;
  &lt;li&gt;System Type:               x64-based PC&lt;/li&gt;
  &lt;li&gt;Total Physical Memory:     2,048 MB&lt;/li&gt;
  &lt;li&gt;Installed Software:
    &lt;ul&gt;
      &lt;li&gt;Sysmon v6.0&lt;/li&gt;
      &lt;li&gt;Chrome Version 57.0.2987.98 (64-bit)&lt;/li&gt;
      &lt;li&gt;Notepad++ 7.3.3&lt;/li&gt;
      &lt;li&gt;WireShark Version 2.2.5 (v2.2.5-0-g440fd4d)&lt;/li&gt;
      &lt;li&gt;Greenshot 1.2.9.129&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;download-winlogbeat&quot;&gt;1. Download WinLogBeat&lt;/h3&gt;
&lt;p&gt;I grabbed my copy (5.2.2) from &lt;a href=&quot;https://www.elastic.co/downloads/beats/winlogbeat&quot;&gt;https://www.elastic.co/downloads/beats/winlogbeat&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;unzip-and-configure-winlogbeat&quot;&gt;2. Unzip and configure WinLogBeat&lt;/h3&gt;
&lt;p&gt;Should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/winlogbeat1.png&quot;&gt;&lt;img src=&quot;/images/winlogbeat1.png&quot; alt=&quot;WinLogBeat Files&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We need to edit the winlogbeat.yml before we install the service.&lt;/p&gt;
&lt;h4 id=&quot;edit-the-logs-winlogbeat-is-listening-to&quot;&gt;2.1 Edit the Logs WinLogBeat is listening to&lt;/h4&gt;
&lt;p&gt;I changed the default config from this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;s&quot;&gt;winlogbeat.event_logs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Application&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;ignore_older&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;72h&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Security&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;System&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to include sysmon and a few of the other bigger logs from this Windows 10 machine:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;s&quot;&gt;winlogbeat.event_logs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Application&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;ignore_older&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;72h&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Security&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;System&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Microsoft-Windows-Sysmon/Operational&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Microsoft-Windows-Store/Operational&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Windows PowerShell&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;configure-network-settings-for-elasticsearch&quot;&gt;2.2 Configure network settings for Elasticsearch&lt;/h4&gt;
&lt;p&gt;On my MacBook I have Elasticsearch configured to run on 0.0.0.0:9200 which means port 9200 on all network interfaces including the network interface VirtualBox setup for the default gateway for the VM.
&lt;a href=&quot;/images/winlogbeat2.png&quot;&gt;&lt;img src=&quot;/images/winlogbeat2.png&quot; alt=&quot;WinLogBeat Files&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A quick check of the VM’s network info tells me the default gateway is 10.0.2.2.
So I changed:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#-------------------------- Elasticsearch output ------------------------------&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;output.elasticsearch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Array of hosts to connect to.&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;localhost:9200&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#-------------------------- Elasticsearch output ------------------------------&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;output.elasticsearch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Array of hosts to connect to.&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10.0.2.2:9200&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I had to change this file again to include authentication creds when I installed the XPACK plugin but I will get there in another post. Baby steps people. Baby steps.&lt;/p&gt;
&lt;h3 id=&quot;install-winlogbeat&quot;&gt;3. Install WinLogBeat&lt;/h3&gt;
&lt;p&gt;Included in the WinLogBeat files is a handy dandy install-service-winlogbeat.ps1 that does the heavy lifting for installing the WinLogBeat service. Simply Run that file and then start the service.
&lt;a href=&quot;/images/winlogbeat3.png&quot;&gt;&lt;img src=&quot;/images/winlogbeat3.png&quot; alt=&quot;WinLogBeat Files&quot; /&gt;&lt;/a&gt;
Now you should be sending logs from WinLogBeat to Elasticsearch. To confirm, check out the terminal window running Elasticsearch and you should see something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;[2017-03-12T18:07:59,156][INFO ][o.e.c.m.MetaDataMappingService] [Bo2nJmM] [winlogbeat-2017.03.12/Du3zdxHXQvivwrVBi6czJQ] update_mapping [wineventlog]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;configure-kibana-to-index-winlogbeat-logs&quot;&gt;4. Configure Kibana to index WinLogBeat logs&lt;/h3&gt;
&lt;p&gt;Now that logs have a freely flowing into Elastic, it is time to update Kibana with an index. Under management, go to Index Patterns.
&lt;a href=&quot;/images/winlogbeat4.png&quot;&gt;&lt;img src=&quot;/images/winlogbeat4.png&quot; alt=&quot;WinLogBeat Files&quot; /&gt;&lt;/a&gt;
In the field, put “winlogbeat*” to start indexing these logs.
&lt;a href=&quot;/images/winlogbeat5.png&quot;&gt;&lt;img src=&quot;/images/winlogbeat5.png&quot; alt=&quot;WinLogBeat Files&quot; /&gt;&lt;/a&gt;
Then click on discover and BOO YAH we have logs.
&lt;a href=&quot;/images/winlogbeat6.png&quot;&gt;&lt;img src=&quot;/images/winlogbeat6.png&quot; alt=&quot;WinLogBeat Files&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;download-configure-and-install-packetbeat-the-same-way&quot;&gt;5. Download, Configure, and Install PacketBeat The Same Way&lt;/h3&gt;

&lt;p&gt;Download PacketBeat from &lt;a href=&quot;https://artifacts.elastic.co/downloads/beats/packetbeat/packetbeat-5.2.2-windows-x86_64.zip&quot;&gt;here&lt;/a&gt;.
PacketBeat on Windows does require a prior installation of &lt;a href=&quot;https://www.winpcap.org/install/bin/WinPcap_4_1_3.exe&quot;&gt;WinPcap&lt;/a&gt;. I installed &lt;a href=&quot;https://www.wireshark.org/#download&quot;&gt;WireShark&lt;/a&gt; and opted to install WinPcap at the same time. You do what you feel is best.
After you extract the packetbeat package on the Windows guest, configure the packbeat.yml to point to the Elasticsearch on the MacBook.
Change:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#-------------------------- Elasticsearch output ------------------------------&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;output.elasticsearch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Array of hosts to connect to.&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;localhost:9200&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#-------------------------- Elasticsearch output ------------------------------&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;output.elasticsearch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Array of hosts to connect to.&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10.0.2.2:9200&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I also had to change this file again to include authentication creds when I installed the X-Pack plugin but I will get there in the aforementioned post.&lt;/p&gt;
&lt;h3 id=&quot;next-post&quot;&gt;Next Post?&lt;/h3&gt;
&lt;p&gt;So there you have have it. In my next post I will cover installing the X-Pack plugin and dig into some of the modifications I made to the Graph plugin to make my logs looks like this:
&lt;a href=&quot;/images/winlogbeat7.png&quot;&gt;&lt;img src=&quot;/images/winlogbeat7.png&quot; alt=&quot;WinLogBeat Files&quot; /&gt;&lt;/a&gt;
and THIS …
&lt;a href=&quot;/images/winlogbeat8.png&quot;&gt;&lt;img src=&quot;/images/winlogbeat8.png&quot; alt=&quot;WinLogBeat Files&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content></entry></feed>
